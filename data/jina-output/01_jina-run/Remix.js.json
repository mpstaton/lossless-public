{
  "code": 200,
  "status": 20000,
  "data": {
    "links": {
      "": "https://rmx.as/discord",
      "Docs": "https://remix.run/docs/en/main",
      "Blog": "https://remix.run/blog",
      "Showcase": "https://remix.run/showcase",
      "Resources": "https://remix.run/resources",
      "Get Started": "https://remix.run/docs/start/quickstart",
      "Read the Docs": "https://remix.run/docs",
      "Jenna Smith": "https://twitter.com/jjenzz/status/1459941582912827398",
      "@jkup": "https://twitter.com/jkup/status/1456360115205033989",
      "@aweary": "https://twitter.com/aweary/status/1456399484473200644",
      "@TAbrodi": "https://twitter.com/TAbrodi/status/1459531154533634048",
      "@sergiodxa": "https://twitter.com/sergiodxa/status/1400503400802959361",
      "@elrickvm": "https://twitter.com/elrickvm/status/1458918740918251524",
      "@theflyingcoder1": "https://twitter.com/theflyingcoder1/status/1456407168291278851",
      "@wisecobbler": "https://twitter.com/wisecobbler/status/1388174702900772868",
      "@meindertsmajens": "https://twitter.com/meindertsmajens/status/1454393707604680711",
      "@cammchenry": "https://twitter.com/cammchenry/status/1447267585456812039",
      "@airuyi": "https://twitter.com/airuyi/status/1456438853804298244"
    },
    "title": "Remix - Build Better Websites",
    "description": "Remix is a full stack web framework that lets you focus on the user interface and work back through web standards to deliver a fast, slick, and resilient user experience. People are gonna love using your stuff.",
    "url": "https://remix.run/",
    "content": "Remix - Build Better Websites\n===============\n\n[](https://remix.run/)\n\n[Docs](https://remix.run/docs/en/main)[Blog](https://remix.run/blog)[Showcase](https://remix.run/showcase)[Resources](https://remix.run/resources)\n\n[Docs](https://remix.run/docs/en/main)[Blog](https://remix.run/blog)[Showcase](https://remix.run/showcase)[Resources](https://remix.run/resources)\n\nWelcome to Remix\n================\n\nFocused on web standards and modern web app UX, you‚Äôre simply going to build better websites\n--------------------------------------------------------------------------------------------\n\nRemix is a full stack web framework that lets you focus on the user interface and work back through web standards to deliver a fast, slick, and resilient user experience. People are gonna love using your stuff.\n\n[Get Started](https://remix.run/docs/start/quickstart)[Read the Docs](https://remix.run/docs)\n\n```\nexport async function loader({ request }) {\n  return getProjects();\n}\n\nexport async function action({ request }) {\n  const form = await request.formData();\n  return createProject({\n    title: form.get(\"title\"),\n  });\n}\n\nexport default function Projects() {\n  const projects = useLoaderData();\n  const { state } = useNavigation();\n  const busy = state === \"submitting\";\n\n  return (\n    <div>\n      {projects.map((project) => (\n        <Link to={project.slug}>\n          {project.title}\n        </Link>\n      ))}\n\n      <Form method=\"post\">\n        <input name=\"title\" />\n        <button type=\"submit\" disabled={busy}>\n          {busy\n            ? \"Creating...\"\n            : \"Create New Project\"}\n        </button>\n      </Form>\n    </div>\n  );\n}\n```\n\n```\nexport async function loader({ request }) {\n  return getProjects();\n}\n\nexport async function action({ request }) {\n  const form = await request.formData();\n  return createProject({ title: form.get(\"title\") });\n}\n\nexport default function Projects() {\n  const projects = useLoaderData();\n  const { state } = useNavigation();\n  const busy = state === \"submitting\";\n\n  return (\n    <div>\n      {projects.map((project) => (\n        <Link to={project.slug}>{project.title}</Link>\n      ))}\n\n      <Form method=\"post\">\n        <input name=\"title\" />\n        <button type=\"submit\" disabled={busy}>\n          {busy ? \"Creating...\" : \"Create New Project\"}\n        </button>\n      </Form>\n    </div>\n  );\n}\n```\n\nTestimonials\n------------\n\n![Image 1](https://remix.run/img/jenna.jpg)\n\n[Jenna Smith](https://twitter.com/jjenzz/status/1459941582912827398),\n\nRadix UI\n\n> I've been waiting for something to encourage progressive enhancement in the React space \\*forever\\* and Remix truly is so much more. Proving we don't need to sacrifice React or choose SSG for a lightning fast, accessible UI, and the DX makes it all too easy ü§§\n\n![Image 2](https://remix.run/img/jkup.jpg)\n\n[@jkup](https://twitter.com/jkup/status/1456360115205033989)\n\nCloudflare\n\n[](https://twitter.com/jkup/status/1456360115205033989)\n\n> holy üí© Remix is good\n\n![Image 3](https://remix.run/img/aweary.jpg)\n\n[@aweary](https://twitter.com/aweary/status/1456399484473200644)\n\nDiscord, prev React Core\n\n[](https://twitter.com/aweary/status/1456399484473200644)\n\n> I just rewrote my first Remix app on top of Cloudflare Workers and Supabase and it‚Äôs so damn good\n\n![Image 4](https://remix.run/img/tiger.jpg)\n\n[@TAbrodi](https://twitter.com/TAbrodi/status/1459531154533634048)\n\nSoftware Developer\n\n[](https://twitter.com/TAbrodi/status/1459531154533634048)\n\n> My mind is still blown away with Remix! So easy and elegant üò©. I love how it also focuses on Accessibility (Progressive Enhancement...) ü§Ø, A few days ago I was like wazzup with remix, we got Next.js and Svelte üò¥ ... and now I'm fired up like crazy üòÇ. This is so good ü§§\n\n![Image 5](https://remix.run/img/sergio.jpg)\n\n[@sergiodxa](https://twitter.com/sergiodxa/status/1400503400802959361)\n\nDaffy, prev Vercel\n\n[](https://twitter.com/sergiodxa/status/1400503400802959361)\n\n> What‚Äôs really cool with Remix loaders is that you can do most of your data transformation and calculations there, like check if a list is empty, limit the number of records, only send specific attributes, so your React component just receives the data and renders it, no logic needed\n\n![Image 6](https://remix.run/img/elrick.jpg)\n\n[@elrickvm](https://twitter.com/elrickvm/status/1458918740918251524)\n\nFullstack Dev, Frontside\n\n[](https://twitter.com/elrickvm/status/1458918740918251524)\n\n> Remix is going to put developers on the Hot Path to build accessible, scaleable, and performant apps, that have stellar user experiences and amazing developer ergonomics. It's not only going to be a win for developers, but also a big win for the end-users!\n\n![Image 7](https://remix.run/img/tom.jpg)\n\n[@theflyingcoder1](https://twitter.com/theflyingcoder1/status/1456407168291278851)\n\nFullstack Developer\n\n[](https://twitter.com/theflyingcoder1/status/1456407168291278851)\n\n> In my opinion @remix\\_run will be game changer for corporate teams hesitant to adopt full stack JavaScript. The core concepts are so intuitive you can pick it up in a day, and it will even integrate into your existing stack.\n\n![Image 8](https://remix.run/img/sophia.jpg)\n\n[@wisecobbler](https://twitter.com/wisecobbler/status/1388174702900772868)\n\nSoftware Engineer, Box\n\n[](https://twitter.com/wisecobbler/status/1388174702900772868)\n\n> I love what @mjackson and @ryanflorence are doing with Remix! Deploying to AWS Lambda in under 30 seconds ü§Ø\n\n![Image 9](https://remix.run/img/jens.jpg)\n\n[@meindertsmajens](https://twitter.com/meindertsmajens/status/1454393707604680711)\n\nWeb Developer\n\n[](https://twitter.com/meindertsmajens/status/1454393707604680711)\n\n> Building with @remix\\_run has been awesome so far. Having used Next.js for applications for years, the nested layouts are a wonderful feature. I also haven't learned this much about the web in years.\n\n![Image 10](https://remix.run/img/cammchenry.jpg)\n\n[@cammchenry](https://twitter.com/cammchenry/status/1447267585456812039)\n\nWeb Developer\n\n[](https://twitter.com/cammchenry/status/1447267585456812039)\n\n> I love using @remix\\_run for my website. Remix has improved my productivity as a front-end developer by empowering me to seamlessly switch between front-end and back-end code.\n\n![Image 11](https://remix.run/img/airuyi.jpg)\n\n[@airuyi](https://twitter.com/airuyi/status/1456438853804298244)\n\nApp Developer\n\n[](https://twitter.com/airuyi/status/1456438853804298244)\n\n> If you're doing #webdevelopment you should check out Remix üî• It's a new (old) paradigm for web dev, which simplifies our code, especially state managementüòÖ, speeds up our page loads, and gives us a mental model and framework we can rely on to create our best work\n\n![Image 12](https://remix.run/wave.png)![Image 13](https://remix.run/loading.gif)\n\nWhile you were waiting for your static site to build, distributed web infra¬≠structure got really good. Break through the static.\n--------------------------------------------------------------------------------------------------------------------------------\n\nRemix is a seamless server and browser runtime that provides snappy page loads and instant transitions by leveraging distributed systems and native browser features instead of clunky static builds. Built on the Web Fetch API (instead of Node) **it can run anywhere**. It already runs natively on Cloudflare Workers, and of course supports serverless and traditional Node.js environments, so you can come as you are.\n\nPage speed is only one aspect of our true goal though. We're after **better user experiences**. As you‚Äôve pushed the boundaries of the web, your tools haven‚Äôt caught up to your appetite. **Remix is ready** to serve you from the initial request to the fanciest UX your designers can think up. Check it out üëÄ\n\nRemix has a cheat code:  \nNested Routes.\n----------------------------------------\n\n‚Üë‚Üë‚Üì‚Üì‚Üê‚Üí‚Üê‚ÜíBA‚Üµ\n\nWebsites usually have levels of navigation that control child views.\n\nNot only are these components pretty much always coupled to URL segments...\n\n...they‚Äôre also the semantic boundary of data loading and code splitting.\n\nHover or tap the buttons to see how they‚Äôre all related\n\nüëá\n\n<Root\\><Sales\\><Invoices\\><Invoice id={id}\\>\n\nexample.com/sales/invoices/102000\n\nFakebooks\n\nDashboard\n\nAccounts\n\nSales\n\nExpenses\n\nReports\n\nSales\n\nOverview\n\nSubscriptions\n\nInvoices\n\nCustomers\n\nDeposits\n\nOverdue\n\n$10,800\n\nDue Soon\n\n$62,000\n\nInvoice List\n\nSanta Monica\n\n$10,800\n\n1995\n\nOverdue\n\nStankonia\n\n$8,000\n\n2000\n\nDue Today\n\nOcean Avenue\n\n$9,500\n\n2003\n\nPaid\n\nTubthumper\n\n$14,000\n\n1997\n\nDue in 10 Days\n\nWide Open Sp...\n\n$4,600\n\n1998\n\nDue in 8 Days\n\nStankonia\n\n$8,000\n\nDue Today ‚Ä¢ Invoiced 10/31/2000\n\nPro Plan\n\n$6,000\n\nCustom\n\n$2,000\n\nNet Total\n\n$8,000\n\nWhat about loading states?\n--------------------------\n\nThrough nested routes, Remix can eliminate nearly every loading state.\n\nMost web apps fetch inside of components, creating request waterfalls, slower loads, and jank.\n\nRemix loads data in parallel on the server and sends a fully formed HTML document. Way faster, jank free.\n\nWithout Remix\n\nabout:blank\n\ndocument\n\nroot.js\n\nuser.json\n\nsales.js\n\nsales/nav.json\n\ninvoices.js\n\ninvoice.js\n\ninvoice/{id}.json\n\nWith Remix\n\nabout:blank\n\ndocument\n\nroot.js\n\nsales.js\n\ninvoices.js\n\ninvoice.js\n\n(Keep scrolling to compare)\n\nSay good¬≠bye to Spinnageddon\n\nSay good¬≠bye to Spinnageddon\n\nPre-fetching Everything\n-----------------------\n\nNested routes allow Remix to make your app as fast as instant.\n\nRemix can prefetch everything in parallel before the user clicks a link.\n\nPublic Data. User Data. Modules. Heck, even CSS.\n\nZero loading states. Zero skeleton UI. Zero jank.\n\nAlright, you caught us, they‚Äôre just prefetch link tags, #useThePlatform\n\nexample.com/dashboard\n\nFakebooks\n\nDashboard\n\nAccounts\n\nSales\n\nExpenses\n\nReports\n\nDashboard\n\nRecent Activity\n\nAlerts\n\nMessages\n\nNew Invoice\n\nCustomer\n\nStankonia\n\nNet Total\n\n$8,000\n\nNew Invoice\n\nCustomer\n\nOcean Avenue\n\nNet Total\n\n$9,500\n\nData loading\n------------\n\n... ![Image 14](https://remix.run/yawn.png) You ever notice most of the code in your app is for changing data?\n\nImagine if React only had props and no way to set state. What‚Äôs the point? If a web framework helps you load data but doesn‚Äôt help you update it, what‚Äôs the point? Remix doesn‚Äôt drop you off at the `<form onSubmit>` cliff. (What the heck does `event.preventDefault` do anyway?)\n\nResilient, progressively enhanced data updates are built in.\n\nIt‚Äôs so simple it‚Äôs kind of silly. Just make a form...\n\n...and an action on a route module. It looks like traditional HTML forms but enables fully dynamic web experiences you're after.\n\nRemix runs the action server side, revalidates data client side, and even handles race conditions from resubmissions.\n\nGet fancy with transition hooks and make some pending UI. Remix handles all the state, you simply ask for it.\n\nOr get jiggy with some optimistic UI. Remix provides the data being sent to the server so you can skip the busy spinners for mutations, too.\n\nHTML forms for mutations. Who knew?\n\n```\nexport default function NewInvoice() {\n  return (\n    <Form method=\"post\">\n      <input type=\"text\" name=\"company\" />\n      <input type=\"text\" name=\"amount\" />\n      <button type=\"submit\">Create</button>\n    </Form>\n  );\n}\n```\n\nError Handling\n--------------\n\n:)\n\nYour websites run into problems, but with Remix they don‚Äôt need to be refreshed. Error handling is hard to remember and hard to do. That‚Äôs why it‚Äôs built in.\n\nRemix handles errors while Server Rendering. Errors while Client Rendering. Even errors in your server side data handling.\n\n![Image 15](https://remix.run/qrcode.png)\n\nRoute Error Boundaries keep the happy path happy.\n-------------------------------------------------\n\nEach route module can export an error boundary next to the default route component.\n\nIf an error is thrown, client or server side, users see the boundary instead of the default component.\n\nRoutes w/o trouble render normally, so users have more options than slamming refresh.\n\nIf a route has no boundary, errors bubble up. Just put one at the top and chill out about errors in code review, yeah?\n\n```\nexport default function InvoiceRoute() {\n  const invoice = useLoaderData();\n  return <Invoice data={invoice} />;\n}\n```\n\nThat's probably enough for now. What are you waiting for?\n\n[Go Play!](https://remix.run/docs)\n\n[](https://github.com/remix-run)[](https://twitter.com/remix_run)[](https://youtube.com/remix_run)[](https://rmx.as/discord)\n\n![Image 16](https://remix.run/assets/icons-Dxzco0Kk.svg)",
    "usage": {
      "tokens": 3082
    }
  }
}