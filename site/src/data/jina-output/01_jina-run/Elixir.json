{
  "code": 200,
  "status": 20000,
  "data": {
    "links": {
      "": "https://erlef.org/",
      "Install": "https://elixir-lang.org/install.html",
      "Learning": "https://elixir-lang.org/learning.html",
      "Docs": "https://elixir-lang.org/docs.html",
      "Guides": "https://hexdocs.pm/elixir/introduction.html",
      "Cases": "https://elixir-lang.org/cases.html",
      "Blog": "https://elixir-lang.org/blog/",
      "#embedded #nerves": "https://elixir-lang.org/blog/2020/08/20/embedded-elixir-at-farmbot/",
      "#real-time #genstage #otp": "https://elixir-lang.org/blog/2020/10/08/real-time-communication-at-scale-with-elixir-at-discord/",
      "#open-data #gov #phoenix": "https://elixir-lang.org/blog/2021/11/10/embracing-open-data-with-elixir-at-the-ministry-of-ecological-transition-in-france/",
      "#streaming #scaling #web": "https://elixir-lang.org/blog/2024/03/05/veeps-elixir-case/",
      "#growth #team #web": "https://elixir-lang.org/blog/2025/01/21/remote-elixir-case/",
      "#api #integration #xml": "https://elixir-lang.org/blog/2020/12/10/integrating-travel-with-elixir-at-duffel/",
      "#messaging #broadway": "https://elixir-lang.org/blog/2021/02/03/social-messaging-with-elixir-at-community/",
      "#paas #phoenix": "https://elixir-lang.org/blog/2020/09/24/paas-with-elixir-at-Heroku/",
      "#computer-vision #phoenix": "https://elixir-lang.org/blog/2021/01/13/orchestrating-computer-vision-with-elixir-at-v7/",
      "#energy #iot #nerves": "https://elixir-lang.org/blog/2023/03/09/embedded-and-cloud-elixir-at-sparkmeter/",
      "#virtual-spaces #phoenix": "https://elixir-lang.org/blog/2021/06/02/social-virtual-spaces-with-elixir-at-mozilla/",
      "#biz-intelligence #phoenix": "https://elixir-lang.org/blog/2021/04/02/marketing-and-sales-intelligence-with-elixir-at-pepsico/",
      "#multiplayer #udp #otp": "https://elixir-lang.org/blog/2021/07/29/bootstraping-a-multiplayer-server-with-elixir-at-x-plane/",
      "#social #broadway": "https://elixir-lang.org/blog/2020/10/27/delivering-social-change-with-elixir-at-change.org/",
      "#collab #phoenix #otp": "https://elixir-lang.org/blog/2020/11/17/real-time-collaboration-with-elixir-at-slab/",
      "Numerical Elixir": "https://github.com/elixir-nx/",
      "such as Nerves": "https://www.nerves-project.org/",
      "Elixir's test framework called ExUnit": "https://hexdocs.pm/ex_unit/",
      "Elixir to write SQL queries": "https://github.com/elixir-ecto/ecto",
      "compiling a subset of Elixir to the GPU": "https://github.com/elixir-nx/nx",
      "Mix is a build tool": "https://hexdocs.pm/mix/",
      "Hex package manager": "https://hex.pm/",
      "hosting documentation": "https://hexdocs.pm/",
      "IEx (Elixir's interactive shell)": "https://hexdocs.pm/iex/",
      "Livebook": "https://livebook.dev/",
      "WhatsApp": "https://www.whatsapp.com/",
      "Klarna": "https://klarna.com/",
      "Elixir v1.18 released": "https://elixir-lang.org/blog/2024/12/19/elixir-v1-18-0-released/",
      "Development & Team": "https://elixir-lang.org/development.html",
      "Source code & issues tracker": "https://github.com/elixir-lang/elixir",
      "Watch the Elixirmini-documentary!": "https://www.youtube.com/watch?v=lxYFOM3UJzo",
      "@elixirlang on Twitter": "https://twitter.com/elixirlang",
      "#elixir on irc.libera.chat": "irc://irc.libera.chat/elixir",
      "Elixir Forum": "http://elixirforum.com/",
      "Elixir on Slack": "https://elixir-slack.community/",
      "Elixir on Discord": "https://discord.gg/elixir",
      "IDE/Editor support": "https://github.com/elixir-lang/elixir/wiki/Code-Editor-Support",
      "Meetups around the world": "https://www.meetup.com/topics/elixir/",
      "Jobs and hiring (community wiki)": "https://github.com/elixir-lang/elixir/wiki/Hiring-Elixir-Developers",
      "Events and resources (community wiki)": "https://github.com/elixir-lang/elixir/wiki",
      "registered trademarks of The Elixir Team": "https://elixir-lang.org/trademarks"
    },
    "title": "The Elixir programming language",
    "description": "Welcome to Elixir, a dynamic, functional language designed for building scalable and maintainable applications",
    "url": "https://elixir-lang.org/",
    "content": "The Elixir programming language\n===============\n\n[![Image 1: Elixir Logo](https://elixir-lang.org/images/logo/logo.png)](https://elixir-lang.org/ \"Elixir\")\n\n*   [Home](https://elixir-lang.org/)\n*   [Install](https://elixir-lang.org/install.html)\n*   [Learning](https://elixir-lang.org/learning.html)\n*   [Docs](https://elixir-lang.org/docs.html)\n*   [Guides](https://hexdocs.pm/elixir/introduction.html)\n*   [Cases](https://elixir-lang.org/cases.html)\n*   [Blog](https://elixir-lang.org/blog/)\n\n##### Elixir is a dynamic, functional language for building scalable and maintainable applications.\n\nElixir runs on the Erlang VM, known for creating low-latency, distributed, and fault-tolerant systems. These capabilities and Elixir tooling allow developers to be productive in several domains, such as web development, embedded software, machine learning, data pipelines, and multimedia processing, across a wide range of industries.\n\nHere is a peek:\n\n```elixir\niex> \"Elixir\" |> String.graphemes() |> Enum.frequencies()\n%{\"E\" => 1, \"i\" => 2, \"l\" => 1, \"r\" => 1, \"x\" => 1}\n```\n\nCheck our [Getting Started guide](https://hexdocs.pm/elixir/introduction.html) and our [Learning page](https://elixir-lang.org/learning.html) to begin your journey with Elixir. Or keep scrolling for an overview of the platform, language, and tools.\n\n#### Companies using Elixir in production\n\n[See more cases â†’](https://elixir-lang.org/cases.html)\n\n[#embedded #nerves](https://elixir-lang.org/blog/2020/08/20/embedded-elixir-at-farmbot/ \"Case: Embedded Elixir at Farmbot\")[#real-time #genstage #otp](https://elixir-lang.org/blog/2020/10/08/real-time-communication-at-scale-with-elixir-at-discord/ \"Case: Real time communication at scale with Elixir at Discord\")[#open-data #gov #phoenix](https://elixir-lang.org/blog/2021/11/10/embracing-open-data-with-elixir-at-the-ministry-of-ecological-transition-in-france/ \"Case: Embracing open data with Elixir at the Ministry of Ecological Transition in France\")[#streaming #scaling #web](https://elixir-lang.org/blog/2024/03/05/veeps-elixir-case/ \"Case: Scaling a streaming service to hundreds of thousands of concurrent viewers at Veeps\")[#growth #team #web](https://elixir-lang.org/blog/2025/01/21/remote-elixir-case/ \"Case: Remote: growing from zero to unicorn with Elixir\")[#api #integration #xml](https://elixir-lang.org/blog/2020/12/10/integrating-travel-with-elixir-at-duffel/ \"Case: Integrating travel with Elixir at Duffel\")[#messaging #broadway](https://elixir-lang.org/blog/2021/02/03/social-messaging-with-elixir-at-community/ \"Case: Social messaging with Elixir at Community\")[#paas #phoenix](https://elixir-lang.org/blog/2020/09/24/paas-with-elixir-at-Heroku/ \"Case: PaaS with Elixir at Heroku\")[#computer-vision #phoenix](https://elixir-lang.org/blog/2021/01/13/orchestrating-computer-vision-with-elixir-at-v7/ \"Case: Orchestrating computer vision with Elixir at V7\")[#energy #iot #nerves](https://elixir-lang.org/blog/2023/03/09/embedded-and-cloud-elixir-at-sparkmeter/ \"Case: Embedded and cloud Elixir for grid-management at Sparkmeter\")[#virtual-spaces #phoenix](https://elixir-lang.org/blog/2021/06/02/social-virtual-spaces-with-elixir-at-mozilla/ \"Case: Social virtual spaces with Elixir at Mozilla\")[#biz-intelligence #phoenix](https://elixir-lang.org/blog/2021/04/02/marketing-and-sales-intelligence-with-elixir-at-pepsico/ \"Case: Marketing and sales intelligence with Elixir at PepsiCo\")[#multiplayer #udp #otp](https://elixir-lang.org/blog/2021/07/29/bootstraping-a-multiplayer-server-with-elixir-at-x-plane/ \"Case: Bootstrapping a multiplayer server with Elixir at X-Plane\")[#social #broadway](https://elixir-lang.org/blog/2020/10/27/delivering-social-change-with-elixir-at-change.org/ \"Case: Delivering social change with Elixir at Change.org\")[#collab #phoenix #otp](https://elixir-lang.org/blog/2020/11/17/real-time-collaboration-with-elixir-at-slab/ \"Case: Real-time collaboration with Elixir at Slab\")\n\n### Platform features\n\n#### Scalability\n\nAll Elixir code runs inside lightweight threads of execution (called processes) that are isolated and exchange information via messages:\n\n```elixir\ncurrent_process = self()\n\n# Spawn an Elixir process (not an operating system one!)\nspawn_link(fn ->\n  send(current_process, {:msg, \"hello world\"})\nend)\n\n# Block until the message is received\nreceive do\n  {:msg, contents} -> IO.puts(contents)\nend\n```\n\nDue to their lightweight nature, you can run hundreds of thousands of processes _concurrently_ in the same machine, using all machine resources efficiently (vertical scaling). Processes may also communicate with other processes running on different machines to coordinate work across multiple nodes (horizontal scaling).\n\nTogether with projects such as [Numerical Elixir](https://github.com/elixir-nx/), Elixir scales across cores, clusters, and GPUs.\n\n#### Fault-tolerance\n\nThe unavoidable truth about software in production is that _things will go wrong_. Even more when we take network, file systems, and other third-party resources into account.\n\nTo react to failures, Elixir supervisors describe how to restart parts of your system when things go awry, going back to a known initial state that is guaranteed to work:\n\n```elixir\nchildren = [\n  TCP.Pool,\n  {TCP.Acceptor, port: 4040}\n]\n\nSupervisor.start_link(children, strategy: :one_for_one)\n```\n\nThe combination of fault-tolerance and message passing makes Elixir an excellent choice for event-driven systems and robust architectures. Frameworks, [such as Nerves](https://www.nerves-project.org/), build on this foundation to enable productive development of reliable embedded/IoT systems.\n\n### Language features\n\n#### Functional programming\n\nFunctional programming promotes a coding style that helps developers write code that is short, concise, and maintainable. For example, pattern matching allows us to elegantly match and assert specific conditions for some code to execute:\n\n```elixir\ndef drive(%User{age: age}) when age >= 16 do\n  # Code that drives a car\nend\n\ndrive(User.get(\"John Doe\"))\n#=> Fails if the user is under 16\n```\n\nElixir relies on those features to ensure your software is working under the expected constraints. And when it is not, don't worry, supervisors have your back!\n\n#### Extensibility and DSLs\n\nElixir has been designed to be extensible, allowing developers to naturally extend the language to particular domains, in order to increase their productivity.\n\nAs an example, let's write a simple test case using [Elixir's test framework called ExUnit](https://hexdocs.pm/ex_unit/):\n\n```elixir\ndefmodule MathTest do\n  use ExUnit.Case, async: true\n\n  test \"can add two numbers\" do\n    assert 1 + 1 == 2\n  end\nend\n```\n\nThe `async: true` option allows `test`s to run in parallel, using as many CPU cores as possible, while the `assert` functionality can introspect your code, providing great reports in case of failures.\n\nOther examples include using [Elixir to write SQL queries](https://github.com/elixir-ecto/ecto), [compiling a subset of Elixir to the GPU](https://github.com/elixir-nx/nx), and more.\n\n### Tooling features\n\n#### A growing ecosystem\n\nElixir ships with a great set of tools to ease development. [Mix is a build tool](https://hexdocs.pm/mix/) that allows you to easily create projects, manage tasks, run tests and more:\n\n```\n$ mix new my_app\n$ cd my_app\n$ mix test\n.\n\nFinished in 0.04 seconds (0.04s on load, 0.00s on tests)\n1 test, 0 failures\n```\n\nMix also integrates with the [Hex package manager](https://hex.pm/) for dependency management and [hosting documentation](https://hexdocs.pm/) for the whole ecosystem.\n\n#### Interactive development\n\nTools like [IEx (Elixir's interactive shell)](https://hexdocs.pm/iex/) leverage the language and platform to provide auto-complete, debugging tools, code reloading, as well as nicely formatted documentation:\n\n```text\n$ iex\nInteractive Elixir - press Ctrl+C to exit (type h() ENTER for help)\niex> h String.trim           # Prints the documentation\niex> i \"Hello, World\"        # Prints information about a data type\niex> break! String.trim/1    # Sets a breakpoint\niex> recompile               # Recompiles the current project\n```\n\nCode notebooks like [Livebook](https://livebook.dev/) allow you to interact with Elixir directly from your browser, including support for plotting, flowcharts, data tables, machine learning, and much more!\n\n#### Erlang compatible\n\nElixir runs on the Erlang VM giving developers complete access to Erlang's ecosystem, used by companies like [WhatsApp](https://www.whatsapp.com/), [Klarna](https://klarna.com/), and many more to build distributed, fault-tolerant applications. An Elixir programmer can invoke any Erlang function with no runtime cost:\n\n```elixir\niex> :crypto.hash(:sha256, \"Using crypto from Erlang OTP\")\n<<192, 223, 75, 115, ...>>\n```\n\nTo learn more about Elixir, check our [Getting Started guide](https://hexdocs.pm/elixir/introduction.html).\n\n### News: [Elixir v1.18 released](https://elixir-lang.org/blog/2024/12/19/elixir-v1-18-0-released/)\n\n  \n\n### Important links\n\n*   [Development & Team](https://elixir-lang.org/development.html)\n*   [Source code & issues tracker](https://github.com/elixir-lang/elixir)\n\n[Watch the Elixir mini-documentary!](https://www.youtube.com/watch?v=lxYFOM3UJzo)\n\n### Join the Community\n\n*   [Hex.pm package manager](https://hex.pm/)\n*   [@elixirlang on Twitter](https://twitter.com/elixirlang)\n*   [#elixir on irc.libera.chat](irc://irc.libera.chat/elixir)\n*   [Elixir Forum](http://elixirforum.com/)\n*   [Elixir on Slack](https://elixir-slack.community/)\n*   [Elixir on Discord](https://discord.gg/elixir)\n*   [IDE/Editor support](https://github.com/elixir-lang/elixir/wiki/Code-Editor-Support)\n*   [Meetups around the world](https://www.meetup.com/topics/elixir/)\n*   [Jobs and hiring (community wiki)](https://github.com/elixir-lang/elixir/wiki/Hiring-Elixir-Developers)\n*   [Events and resources (community wiki)](https://github.com/elixir-lang/elixir/wiki)\n\n[![Image 2: Join the Erlang Ecosystem Foundation](https://elixir-lang.org/images/logo/eef.png)](https://erlef.org/ \"Join the Erlang Ecosystem Foundation\")\n\nÂ© 2012â€“2025 The Elixir Team.  \nElixir and the Elixir logo are [registered trademarks of The Elixir Team](https://elixir-lang.org/trademarks).",
    "usage": {
      "tokens": 2661
    }
  }
}