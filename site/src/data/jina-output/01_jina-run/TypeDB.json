{
  "code": 200,
  "status": 20000,
  "data": {
    "links": {
      "Learn more": "https://typedb.com/features#robust-api",
      "TypeDB 3.0 is live! Get started for free.": "https://cloud.typedb.com/sign-up",
      "": "https://typedb.com/",
      "DatabaseExplore the capabilities of TypeDB": "https://typedb.com/features",
      "EnterpriseTake full control of TypeDB": "https://typedb.com/support#enterprise-support",
      "Community EditionThe open-source version of TypeDB": "https://github.com/typedb/typedb",
      "CloudDeploy in a hosted cloud environment": "https://typedb.com/cloud",
      "StudioWork with a beautiful IDE": "https://typedb.com/docs/manual/studio",
      "ConsoleDevelop with a powerful CLI": "https://typedb.com/docs/manual/console",
      "Driver SDKsBuild with native language drivers": "https://typedb.com/docs/drivers/",
      "View pricing": "https://typedb.com/pricing",
      "DocsRead the TypeDB docs": "https://typedb.com/docs",
      "ManualGuides and best practices": "https://typedb.com/docs/manual/",
      "TypeQLLearn TypeDB's query language": "https://typedb.com/docs/typeql/",
      "DiscordJoin the live community chat server": "https://typedb.com/discord",
      "GitHubExplore TypeDB's source code": "https://github.com/typedb",
      "ForumDiscussion forum for deeper topics": "https://forum.typedb.com/",
      "Tech talksRequest a technical deep-dive for your team": "https://typedb.com/request-tech-talk",
      "Get startedLearn basics, start developing": "https://typedb.com/docs/home/get-started",
      "FundamentalsExplaining TypeDB's core concepts": "https://typedb.com/fundamentals",
      "AcademyCourses and learning material": "https://typedb.com/docs/academy/",
      "Learning centerIndex of all learning resources": "https://typedb.com/learn",
      "BlogsOur technical developer blog": "https://typedb.com/blog",
      "LecturesUpcoming and past lectures": "https://typedb.com/lectures",
      "VideosBe sure to like and subscribe": "https://www.youtube.com/c/vaticle",
      "ResearchAcademic research papers": "https://typedb.com/papers",
      "Startup programAre you a builder or breaker?": "https://typedb.com/startup-program",
      "SupportEnterprise and community support": "https://typedb.com/support",
      "Sign in": "https://cloud.typedb.com/sign-in",
      "Principled": "https://typedb.com/#main-principled",
      "Intuitive": "https://typedb.com/#main-intuitive",
      "Extensible": "https://typedb.com/#main-extensible",
      "Declarative": "https://typedb.com/#main-declarative",
      "Safe": "https://typedb.com/#main-safe",
      "TypeDB": "https://typedb.com/#impact-2-typedb",
      "Relational": "https://typedb.com/#impact-2-relational",
      "Document": "https://typedb.com/#impact-2-document",
      "Graph": "https://typedb.com/#impact-2-graph",
      "View GitHub": "https://github.com/typedb/typedb-driver",
      "Docs": "https://typedb.com/docs/drivers/c/",
      "GitHub": "https://github.com/typedb/typedb-driver/tree/development/c",
      "Crates": "https://crates.io/crates/typedb-driver",
      "PyPI": "https://pypi.org/project/typedb-driver/",
      "NPM": "https://www.npmjs.com/package/typedb-driver",
      "Repo": "https://cloudsmith.io/~typedb/repos/public-release/packages/detail/maven/typedb-driver/latest/a=noarch;xg=com.vaticle.typedb/#versions",
      "NuGet": "https://www.nuget.org/packages/TypeDB.Driver",
      "Submit request on GitHub": "https://github.com/typedb/typedb-driver/issues/new?template=LANGUAGE_DRIVER_REQUEST.md",
      "Sign up": "https://cloud.typedb.com/",
      "Twitter": "https://twitter.com/typedb_",
      "YouTube": "https://www.youtube.com/@typedb",
      "LinkedIn": "https://www.linkedin.com/company/typedb",
      "Deploy": "https://typedb.com/deploy",
      "Subscribe to Newsletter": "https://typedb.com/?dialog=newsletter",
      "Contact Us": "https://typedb.com/?dialog=contact",
      "Provide Feedback": "https://typedb.com/?dialog=feedback",
      "Overview": "https://typedb.com/docs/home/",
      "Careers": "https://apply.workable.com/typedb/",
      "Terms of Service": "https://typedb.com/legal/terms-of-service"
    },
    "title": "TypeDB: the power of programming, in your database",
    "description": "TypeDB enables software engineers to build data applications faster, with a modern language that avoids complexity.",
    "url": "https://typedb.com/",
    "content": "TypeDB: The power of programming, in your database.\n===============\n\nThis website uses cookies to ensure you get the best experience on our website. [Learn more](https://typedb.com/legal/privacy-policy)\n\nGot it!\n\nThis website uses cookies to ensure you get the best experience on our website. [Learn more](https://typedb.com/legal/privacy-policy)\n\nGot it!\n\n[TypeDB 3.0 is live! Get started for free.](https://cloud.typedb.com/sign-up)\n\n[](https://typedb.com/)\n\n*   Products\n    \n    ##### Services\n    \n    [Database Explore the capabilities of TypeDB](https://typedb.com/features)[Enterprise Take full control of TypeDB](https://typedb.com/support#enterprise-support)[Community Edition The open-source version of TypeDB](https://github.com/typedb/typedb)\n    \n    ##### Platform\n    \n    [Cloud Deploy in a hosted cloud environment](https://typedb.com/cloud)\n    \n    ##### Tools\n    \n    [Studio Work with a beautiful IDE](https://typedb.com/docs/manual/studio)[Console Develop with a powerful CLI](https://typedb.com/docs/manual/console)[Driver SDKs Build with native language drivers](https://typedb.com/docs/drivers/)\n    \n    *   ##### What is TypeDB?\n        \n        [Learn more](https://typedb.com/philosophy)\n    *   ##### Try cloud free\n        \n        [Launch](https://cloud.typedb.com/sign-up)\n    *   ##### Pricing and plans\n        \n        [View pricing](https://typedb.com/pricing)\n    \n*   Developers\n    \n    ##### Learn\n    \n    [Docs Read the TypeDB docs](https://typedb.com/docs)[Manual Guides and best practices](https://typedb.com/docs/manual/)[Drivers TypeDB driver SDK docs](https://typedb.com/docs/drivers/)[TypeQL Learn TypeDB's query language](https://typedb.com/docs/typeql/)\n    \n    ##### Community\n    \n    [Discord Join the live community chat server](https://typedb.com/discord)[GitHub Explore TypeDB's source code](https://github.com/typedb)[Forum Discussion forum for deeper topics](https://forum.typedb.com/)\n    \n    [Tech talks Request a technical deep-dive for your team](https://typedb.com/request-tech-talk)\n    \n*   Resources\n    \n    ##### Learn\n    \n    [Get started Learn basics, start developing](https://typedb.com/docs/home/get-started)[Fundamentals Explaining TypeDB's core concepts](https://typedb.com/fundamentals)[Academy Courses and learning material](https://typedb.com/docs/academy/)[Learning center Index of all learning resources](https://typedb.com/learn)\n    \n    ##### Content\n    \n    [Blogs Our technical developer blog](https://typedb.com/blog)[Lectures Upcoming and past lectures](https://typedb.com/lectures)[Videos Be sure to like and subscribe](https://www.youtube.com/c/vaticle)[Research Academic research papers](https://typedb.com/papers)\n    \n    [Startup program Are you a builder or breaker?](https://typedb.com/startup-program)[Support Enterprise and community support](https://typedb.com/support)\n    \n\n*   [Pricing](https://typedb.com/pricing)\n*   [Sign in](https://cloud.typedb.com/sign-in)\n*   [Get started free](https://cloud.typedb.com/sign-up)\n\nThe power of programming, in your database.\n===========================================\n\nTypeDB enables software engineers to build data applications faster, with a modern language that avoids complexity.\n\n[Get started free](https://cloud.typedb.com/sign-up)\n\n[##### Principled](https://typedb.com/#main-principled)[##### Intuitive](https://typedb.com/#main-intuitive)[##### Extensible](https://typedb.com/#main-extensible)[##### Declarative](https://typedb.com/#main-declarative)[##### Safe](https://typedb.com/#main-safe)\n\n1.  1\n2.  2\n3.  3\n4.  4\n5.  5\n6.  6\n7.  7\n8.  8\n9.  9\n10.  10\n11.  11\n12.  12\n13.  13\n14.  14\n15.  15\n16.  16\n17.  17\n18.  18\n19.  19\n20.  20\n21.  21\n22.  22\n23.  23\n24.  24\n25.  25\n26.  26\n27.  27\n28.  28\n29.  29\n30.  30\n31.  31\n32.  32\n33.  33\n\n```typeql\n\nmatch\n  $user isa user,\n    has full-name $name,\n    has email $email;\nfetch\n  $name;\n  $email;\n# This returns all users of any type\n\nmatch\n  $user isa employee,\n    has full-name $name,\n    has email $email,\n    has employee-id $id;\nfetch\n  $name;\n  $email;\n  $id;\n# This returns only users who are employees\n\nmatch \n  $user-type sub user;\n  $user isa $user-type,\n    has full-name $name,\n    has email $email;\nfetch\n  $name;\n  $email;\n  $user-type;\n# This returns all users and their type\n```\n\nEvery data point has a type that you define, like `employee`. Types can also be subtypes of other types, like `user`. So, a query for `user` entities could return both `employee` and `contractor` entities, without the query having to specify this. We call this polymorphism, and it drastically simplifies how you interact with your database.\n\n[Learn more](https://typedb.com/features#conceptual-modeling)\n\n1.  1\n2.  2\n3.  3\n4.  4\n5.  5\n6.  6\n7.  7\n8.  8\n9.  9\n10.  10\n11.  11\n12.  12\n13.  13\n14.  14\n15.  15\n16.  16\n17.  17\n18.  18\n19.  19\n20.  20\n21.  21\n22.  22\n23.  23\n24.  24\n25.  25\n26.  26\n27.  27\n28.  28\n29.  29\n30.  30\n31.  31\n32.  32\n33.  33\n\n```typeql\n\ninsert\n\n  $john isa full-time-employee,\n    has full-name \"John Doe\", \n    has primary-email \"john.doe@typedb.com\",\n    has email \"j.doe@typedb.com\",\n    has email \"john@typedb.com\",\n    has employee-id 183;\n  $readme isa file, has path \"/home/johndoe/repos/typedb/readme.md\";\n  $edit isa action, has name \"edit file\";\n  $kevin isa user, has email \"kevin@typedb.com\";\n\n  $perm (subject: $john, object: $readme, action: $edit) isa permission;\n  $rqst (target: $perm, requestee: $kevin) isa change-request, has requested-change \"revoke\";\n```\n\nTypes, attributes and relations aren’t things you have to implement: they’re core features. With the freedom to model hierarchies, multi-valued attributes, n-ary relations, nested relations and more, the conceptual data model _is_ the data model. This makes database design, and writing queries, incredibly intuitive.\n\n[Learn more](https://typedb.com/features#conceptual-modeling)\n\n1.  1\n2.  2\n3.  3\n4.  4\n5.  5\n6.  6\n7.  7\n8.  8\n9.  9\n10.  10\n11.  11\n12.  12\n13.  13\n14.  14\n15.  15\n16.  16\n17.  17\n18.  18\n19.  19\n20.  20\n21.  21\n22.  22\n23.  23\n24.  24\n25.  25\n26.  26\n27.  27\n28.  28\n29.  29\n30.  30\n31.  31\n32.  32\n33.  33\n\n```typeql\n\ndefine\n\n  user sub entity,\n    owns full-name,\n    owns email @unique;\n  employee sub user,\n    owns employee-id @key,\n    plays team-membership:member;\n\n  membership sub relation, abstract,\n    relates parent,\n    relates member;\n  team-membership sub membership,\n    relates team as parent;\n\n  full-name sub attribute, value string;\n  id sub attribute, value string;\n  email sub id;\n  employee-id sub id;\n\n```\n\nTypeDB ensures conceptual consistency between your type hierarchies and declared type behaviours. This allows the schema to be trivially extended with no migrations or downtime. You can create abstract types and override supertype properties within the schema, bringing the expressive power of OOP to the database layer.\n\n[Learn more](https://typedb.com/features#strong-type-system)\n\n1.  1\n2.  2\n3.  3\n4.  4\n5.  5\n6.  6\n7.  7\n8.  8\n9.  9\n10.  10\n11.  11\n12.  12\n13.  13\n14.  14\n15.  15\n16.  16\n17.  17\n18.  18\n19.  19\n20.  20\n21.  21\n22.  22\n23.  23\n24.  24\n25.  25\n26.  26\n27.  27\n28.  28\n29.  29\n30.  30\n31.  31\n32.  32\n33.  33\n\n```typeql\n\nmatch\n  $user isa user;\nfetch\n  $user: full-name;\n\nmatch\n  $user isa user, has email \"john@typedb.com\";\nfetch\n  $user: full-name;\n\nmatch\n  $user isa user, has email \"john@typedb.com\";\n  (subject: $user, object: $tql, action: $action) isa permission;\n  $tql isa file, has extension \"tql\";\nfetch\n  $user: full-name;\n\nmatch\n  $user isa user;\n  (subject: $user, object: $tql, action: $action) isa permission;\n  $tql isa file, has extension \"tql\";\n  (team: $eng, member: $user) isa team-membership;\n  $eng isa team, has name \"Engineering\"; \nfetch\n  $user: full-name;\n\n```\n\nTypeQL works through declarative pattern matching, allowing queries to be scoped to any level in the type hierarchy without considering physical data stores or execution strategy. As a composable language, concatenating two valid patterns will always produce a new valid one. Thanks to the high level of abstraction and near-natural syntax, domain experts can instantly understand a query's intent even with no knowledge of TypeQL.\n\n[Learn more](https://typedb.com/features#modern-language)\n\n1.  1\n2.  2\n3.  3\n4.  4\n5.  5\n6.  6\n7.  7\n8.  8\n9.  9\n10.  10\n11.  11\n12.  12\n13.  13\n14.  14\n15.  15\n16.  16\n17.  17\n18.  18\n19.  19\n20.  20\n21.  21\n22.  22\n23.  23\n24.  24\n25.  25\n26.  26\n27.  27\n28.  28\n29.  29\n30.  30\n31.  31\n32.  32\n33.  33\n\n```typeql\n\ndefine\n  weekly-hours sub attribute value long;\n  full-time-employee sub employee;\n  part-time-employee sub employee, owns weekly-hours;\n\ninsert\n  $francois isa full-time-employee,\n    has full-name \"François Durand\",\n    has email \"francois@typedb.com\",\n    has employee-id 184,\n    has weekly-hours 35;\n\n# [THW03] Invalid Write: Attribute of type 'weekly-hours' is\n# not defined to be owned by type 'full-time-employee'.\n```\n\nWith declarative schemas backed by static type checking, all queries are validated to ensure nonsensical writes are automatically blocked, and nonsensical reads throw an exception instead of returning an empty result set. Sessions and transactions are also strongly typed, preventing unauthorized and unintentional modifications from committing.\n\n[Learn more](https://typedb.com/features#strong-type-system)\n\nModel data directly as entities with attributes and relations\n-------------------------------------------------------------\n\nDesigning your database requires nothing more than describing the real things your data represents. This puts an end to ‘object-relational mismatch’. You no longer need to think about your data in a different way between your application and your database.\n\n[##### TypeDB](https://typedb.com/#impact-0-typedb)[##### Relational](https://typedb.com/#impact-0-relational)[##### Document](https://typedb.com/#impact-0-document)[##### Graph](https://typedb.com/#impact-0-graph)\n\n1.  1\n2.  2\n3.  3\n4.  4\n5.  5\n6.  6\n7.  7\n8.  8\n9.  9\n10.  10\n11.  11\n12.  12\n13.  13\n14.  14\n15.  15\n16.  16\n17.  17\n18.  18\n19.  19\n20.  20\n21.  21\n22.  22\n23.  23\n24.  24\n25.  25\n26.  26\n27.  27\n28.  28\n29.  29\n30.  30\n31.  31\n32.  32\n33.  33\n\n```typeql\n\ninsert\n\n  $john isa full-time-employee,\n    has full-name \"John Doe\", \n    has primary-email \"john.doe@typedb.com\",\n    has email \"j.doe@typedb.com\",\n    has email \"john@typedb.com\",\n    has employee-id 183;\n  $readme isa file, has path \"/home/johndoe/repos/typedb/readme.md\";\n  $edit isa action, has name \"edit file\";\n  $kevin isa user, has email \"kevin@typedb.com\";\n\n  $perm (subject: $john, object: $readme, action: $edit) isa permission;\n  $rqst (target: $perm, requestee: $kevin) isa change-request, has requested-change \"revoke\";\n```\n\nTypeDB uses the Enhanced Entity-Relationship model with a declarative schema and static type checking. This allows the natural implementation of a type hierarchy, multivalued attributes, and n-ary and nested relations. Leverage OOP concepts like abstraction, inheritance, and polymorphism without warping the conceptual model. Normalization, null values, and reification are things of the past.\n\n[Learn more](https://typedb.com/philosophy)\n\n1.  1\n2.  2\n3.  3\n4.  4\n5.  5\n6.  6\n7.  7\n8.  8\n9.  9\n10.  10\n11.  11\n12.  12\n13.  13\n14.  14\n15.  15\n16.  16\n17.  17\n18.  18\n19.  19\n20.  20\n21.  21\n22.  22\n23.  23\n24.  24\n25.  25\n26.  26\n27.  27\n28.  28\n29.  29\n30.  30\n31.  31\n32.  32\n33.  33\n34.  34\n35.  35\n36.  36\n37.  37\n38.  38\n39.  39\n40.  40\n41.  41\n42.  42\n43.  43\n44.  44\n45.  45\n46.  46\n47.  47\n48.  48\n49.  49\n50.  50\n51.  51\n52.  52\n53.  53\n54.  54\n55.  55\n\n```sql\n\nDO $$\nDECLARE\n    inserted_user_id INTEGER;\n    inserted_resource_id INTEGER;\n    inserted_action_id INTEGER;\n    inserted_requestee_id INTEGER;\n    inserted_permission_id INTEGER;\nBEGIN\n    INSERT INTO users (id, full_name)\n    VALUES (DEFAULT, 'John Doe')\n    RETURNING id INTO inserted_user_id;\n    \n    INSERT INTO user_emails (user_id, email, is_primary)\n    VALUES\n        (inserted_user_id, 'john.doe@typedb.com', TRUE),\n        (inserted_user_id, 'j.doe@typedb.com', FALSE),\n        (inserted_user_id, 'john@typedb.com', FALSE);\n    \n    INSERT INTO employees (user_id, employee_id)\n    VALUES (inserted_user_id, 183);\n    \n    INSERT INTO full_time_employees (user_id)\n    VALUES (inserted_user_id);\n    \n    INSERT INTO resources (id)\n    VALUES (DEFAULT)\n    RETURNING id INTO inserted_resource_id;\n    \n    INSERT INTO files (inserted_resource_id, path)\n    VALUES (inserted_resource_id, '/home/johndoe/repos/typedb/readme.md');\n    \n    INSERT INTO actions (id, name)\n    VALUES (DEFAULT, 'edit file')\n    RETURNING id INTO inserted_action_id;\n    \n    INSERT INTO users (id, full_name)\n    VALUES (DEFAULT, NULL)\n    RETURNING id INTO inserted_requestee_id;\n    \n    INSERT INTO user_emails (user_id, email, is_primary)\n    VALUES (inserted_requestee_id, 'kevin@typedb.com', FALSE);\n    \n    INSERT INTO permissions (id, subject, object, action)\n    VALUES (DEFAULT, inserted_user_id, inserted_resource_id, inserted_action_id)\n    RETURNING id INTO inserted_permission_id;\n    \n    INSERT INTO change_requests (id, target, requestee, requested_change)\n    VALUES (DEFAULT, inserted_permission_id, inserted_requestee_id, 'revoke');\n    \n    COMMIT;\nEND $$;\n\n```\n\nSQL was designed in a pre-OOP era. Schemas and queries quickly grow out of control when implementing class-table inheritance and normalizing multivalued attributes. Inheritance is also impossible to implement without losing referential integrity. This can only be fixed with brittle constraint-defining syntax that requires continual maintenance or integrity control in the application layer.\n\n[Learn more](https://typedb.com/philosophy)\n\n1.  1\n2.  2\n3.  3\n4.  4\n5.  5\n6.  6\n7.  7\n8.  8\n9.  9\n10.  10\n11.  11\n12.  12\n13.  13\n14.  14\n15.  15\n16.  16\n17.  17\n18.  18\n19.  19\n20.  20\n21.  21\n22.  22\n23.  23\n24.  24\n25.  25\n26.  26\n27.  27\n28.  28\n29.  29\n30.  30\n31.  31\n32.  32\n33.  33\n34.  34\n35.  35\n36.  36\n37.  37\n38.  38\n39.  39\n40.  40\n41.  41\n42.  42\n43.  43\n44.  44\n45.  45\n46.  46\n47.  47\n48.  48\n49.  49\n50.  50\n51.  51\n52.  52\n53.  53\n54.  54\n55.  55\n56.  56\n57.  57\n58.  58\n59.  59\n60.  60\n61.  61\n62.  62\n63.  63\n64.  64\n65.  65\n66.  66\n67.  67\n68.  68\n69.  69\n70.  70\n71.  71\n72.  72\n73.  73\n74.  74\n75.  75\n76.  76\n77.  77\n78.  78\n79.  79\n80.  80\n81.  81\n\n```typescript\n\ndb.change_requests.aggregate([\n    {\n        $lookup: {\n            from: \"permissions\",\n            localField: \"target\",\n            foreignField: \"_id\",\n            as: \"permission\"\n        }\n    },\n    {\n        $unwind: {\n            path: \"$permission\"\n        }\n    },\n    {\n        $lookup: {\n            from: \"users\",\n            localField: \"user\",\n            foreignField: \"_id\",\n            as: \"user\"\n        }\n    },\n    {\n        $unwind: {\n            path: \"$user\"\n        }\n    },\n    {\n        $lookup: {\n            from: \"users\",\n            localField: \"permission.user\",\n            foreignField: \"_id\",\n            as: \"permission.user\"\n        }\n    },\n    {\n        $unwind: {\n            path: \"$permission.user\"\n        }\n    },\n    {\n        $lookup: {\n            from: \"identifiers\",\n            localField: \"permission.object\",\n            foreignField: \"_id\",\n            as: \"permission.object\"\n        }\n    },\n    {\n        $unwind: {\n            path: \"$permission.object\"\n        }\n    },\n    {\n        $lookup: {\n            from: \"actions\",\n            localField: \"permission.action\",\n            foreignField: \"_id\",\n            as: \"permission.action\"\n        }\n    },\n    {\n        $unwind: {\n            path: \"$permission.action\"\n        }\n    },\n    {\n        $project: {\n            _id: false,\n            user: \"$permission.user.email\",\n            requestee: \"$user.email\",\n            target: \"$permission.object.identifier\",\n            action: \"$permission.action.name\",\n            request: \"$req_change\"\n        }\n    }\n])\n\n```\n\nDocument databases are designed and optimized to store hierarchical data. They can easily store multivalued attributes as list fields and null values as the absence of fields. However, inserting and retrieving highly interconnected data is complicated and poorly optimized. All similarly shaped data is dumped into the same collection without a schema, leaving the backend developer responsible for maintaining integrity and structure.\n\n[Learn more](https://typedb.com/philosophy)\n\n1.  1\n2.  2\n3.  3\n4.  4\n5.  5\n6.  6\n7.  7\n8.  8\n9.  9\n10.  10\n11.  11\n12.  12\n13.  13\n14.  14\n15.  15\n16.  16\n17.  17\n18.  18\n19.  19\n20.  20\n21.  21\n22.  22\n23.  23\n24.  24\n25.  25\n26.  26\n27.  27\n28.  28\n29.  29\n30.  30\n31.  31\n32.  32\n33.  33\n34.  34\n35.  35\n36.  36\n\n```cypher\n\nMATCH\n    (john:User),\n    (readme:File {path: \"/home/johndoe/repos/typedb/readme.md\"}),\n    (edit:Action {name: \"edit file\"})\nWHERE (\n        john.primary_email = \"john@typedb.com\"\n        OR \"john@typedb.com\" IN john.alias_emails\n    ) AND NOT EXISTS {\n        MATCH (john)<-[:SUBJECT]-(perm:Permission)-[:OBJECT]->(readme)\n        WHERE EXISTS ( (perm)-[:ACTION]->(edit) )\n    }\nWITH john, readme, edit \nCREATE (john)<-[:SUBJECT]-(perm:Permission)-[:OBJECT]->(readme)\nWITH edit, perm\nCREATE (perm)-[:ACTION]->(edit);\nMATCH\n    (perm:Permission),\n    (perm)-[:SUBJECT]->(john:User),\n    (perm)-[:OBJECT]->(readme:File {id: \"/home/typedb/repos/typedb/readme.md\"}),\n    (perm)-[:ACTION]->(edit:Action {name: \"edit file\"}),\n    (kevin:User)\nWHERE (\n        john.primary_email = \"john@typedb.com\"\n        OR \"john@typedb.com\" IN john.alias_emails\n    ) AND (\n        kevin.primary_email = \"kevin@typedb.com\"\n        OR \"kevin@typedb.com\" IN kevin.alias_emails\n    )\nCREATE\n    (rqst:ChangeRequest {requested_change: \"revoke\"}),\n    (rqst)-[:TARGET]->(perm),\n    (rsqt)-[:REQUESTEE]->(kevin);\n\n```\n\nGraph databases, despite excelling at storing traditional graph-like data, cannot natively express relations other than strictly binary ones between two entities. This forces you to reify the model: turn relationships from edges into nodes, blurring the lines between entity and relation. Polymorphism is challenging to handle without a proper schema, forcing type hierarchies to be implemented as structureless data labels.\n\n[Learn more](https://typedb.com/philosophy)\n\nModify your data model without refactoring or migrating\n-------------------------------------------------------\n\nExtending an SQL database often involves a lengthy migration process. With TypeDB, you can extend your model without refactoring your queries or application code. Everything still works, because the data logic is in the structure, not the query.\n\n[##### TypeDB](https://typedb.com/#impact-1-typedb)[##### Relational](https://typedb.com/#impact-1-relational)[##### Document](https://typedb.com/#impact-1-document)[##### Graph](https://typedb.com/#impact-1-graph)\n\n1.  1\n2.  2\n3.  3\n4.  4\n5.  5\n6.  6\n7.  7\n8.  8\n9.  9\n10.  10\n11.  11\n12.  12\n13.  13\n14.  14\n15.  15\n16.  16\n17.  17\n18.  18\n19.  19\n20.  20\n21.  21\n22.  22\n23.  23\n24.  24\n25.  25\n26.  26\n27.  27\n28.  28\n29.  29\n30.  30\n31.  31\n32.  32\n33.  33\n\n```typeql\n\nmatch\n  $user isa user, has email $email;\n  $rsrc isa! $resource-type, has id $id;\n  $resource-type sub resource;\n  $own (resource: $rsrc, owner: $user) isa resource-ownership;\nfetch\n  $email;\n  $resource-type;\n  $id;\n```\n\nTypeDB is a truly polymorphic database. Queries are written in a high-level declarative language and resolved against the schema at query-time. Variables implicitly match all valid types, so queries never have to be updated when new subtypes are added. Attributes and relations are always implemented in the same way, so cardinality changes never require a change to the underlying model. All this means that extensions to the data model are trivial, and don't require refactors.\n\n[Learn more](https://typedb.com/philosophy)\n\n1.  1\n2.  2\n3.  3\n4.  4\n5.  5\n6.  6\n7.  7\n8.  8\n9.  9\n10.  10\n11.  11\n12.  12\n13.  13\n14.  14\n15.  15\n16.  16\n17.  17\n18.  18\n19.  19\n20.  20\n21.  21\n22.  22\n23.  23\n24.  24\n25.  25\n26.  26\n27.  27\n28.  28\n29.  29\n30.  30\n31.  31\n32.  32\n33.  33\n34.  34\n35.  35\n36.  36\n37.  37\n38.  38\n39.  39\n40.  40\n41.  41\n42.  42\n43.  43\n44.  44\n45.  45\n46.  46\n47.  47\n48.  48\n49.  49\n50.  50\n51.  51\n52.  52\n53.  53\n54.  54\n55.  55\n56.  56\n57.  57\n58.  58\n59.  59\n60.  60\n61.  61\n62.  62\n63.  63\n64.  64\n65.  65\n66.  66\n67.  67\n68.  68\n69.  69\n70.  70\n71.  71\n72.  72\n73.  73\n74.  74\n75.  75\n76.  76\n77.  77\n78.  78\n79.  79\n80.  80\n81.  81\n82.  82\n83.  83\n84.  84\n85.  85\n86.  86\n87.  87\n\n```sql\n\nSELECT\n    ue.email AS email,\n    'file' AS resource_type,\n    f.path AS id\nFROM users u\nJOIN user_emails ue\nON u.id = ue.user_id\nJOIN resource_ownerships ro\nON u.id = ro.user_id\nJOIN resources r\nON ro.resource_id = r.id\nJOIN files f\nON r.id = f.resource_id\nUNION ALL\nSELECT\n    ue.email AS email,\n    'directory' AS resource_type,\n    d.path AS id\nFROM users u\nJOIN user_emails ue\nON u.id = ue.user_id\nJOIN resource_ownerships ro\nON u.id = ro.user_id\nJOIN resources r\nON ro.resource_id = r.id\nJOIN directories d\nON r.id = d.resource_id\nUNION ALL\nSELECT\n    ue.email AS email,\n    'commit' AS resource_type,\n    c.hash AS id\nFROM users u\nJOIN user_emails ue\nON u.id = ue.user_id\nJOIN resource_ownerships ro\nON u.id = ro.user_id\nJOIN resources r\nON ro.resource_id = r.id\nJOIN commits c\nON r.id = c.resource_id\nUNION ALL\nSELECT\n    ue.email AS email,\n    'repository' AS resource_type,\n    re.name AS id\nFROM users u\nJOIN user_emails ue\nON u.id = ue.user_id\nJOIN resource_ownerships ro\nON u.id = ro.user_id\nJOIN resources r\nON ro.resource_id = r.id\nJOIN repositories re\nON r.id = re.resource_id\nUNION ALL\nSELECT\n    ue.email AS email,\n    'table' AS resource_type,\n    t.name AS id\nFROM users u\nJOIN user_emails ue\nON u.id = ue.user_id\nJOIN resource_ownerships ro\nON u.id = ro.user_id\nJOIN resources r\nON ro.resource_id = r.id\nJOIN tables t\nON r.id = t.resource_id\nUNION ALL\nSELECT\n    ue.email AS email,\n    'database' AS resource_type,\n    f.name AS id\nFROM users u\nJOIN user_emails ue\nON u.id = ue.user_id\nJOIN resource_ownerships ro\nON u.id = ro.user_id\nJOIN resources r\nON ro.resource_id = r.id\nJOIN databases d\nON r.id = d.resource_id;\n\n```\n\nSQL's inability to natively model inheritance and polymorphism leads to brittle queries that must explicitly describe all data to be returned. When the data model changes, many queries cease to be valid, requiring extensive modifications to your application code. Not only does data need to be carefully migrated to maintain integrity, but the migration process extends outside of the database to any application components that need to interact with it.\n\n[Learn more](https://typedb.com/philosophy)\n\n1.  1\n2.  2\n3.  3\n4.  4\n5.  5\n6.  6\n7.  7\n8.  8\n9.  9\n10.  10\n11.  11\n12.  12\n13.  13\n14.  14\n15.  15\n16.  16\n17.  17\n18.  18\n19.  19\n20.  20\n21.  21\n22.  22\n23.  23\n24.  24\n25.  25\n26.  26\n27.  27\n28.  28\n29.  29\n30.  30\n31.  31\n32.  32\n33.  33\n34.  34\n35.  35\n36.  36\n37.  37\n38.  38\n39.  39\n40.  40\n41.  41\n42.  42\n43.  43\n44.  44\n45.  45\n46.  46\n47.  47\n48.  48\n49.  49\n50.  50\n51.  51\n52.  52\n53.  53\n54.  54\n55.  55\n56.  56\n57.  57\n58.  58\n59.  59\n60.  60\n61.  61\n62.  62\n63.  63\n64.  64\n65.  65\n66.  66\n67.  67\n68.  68\n69.  69\n70.  70\n71.  71\n72.  72\n73.  73\n74.  74\n75.  75\n76.  76\n77.  77\n78.  78\n79.  79\n80.  80\n81.  81\n82.  82\n83.  83\n84.  84\n85.  85\n86.  86\n87.  87\n88.  88\n89.  89\n90.  90\n91.  91\n92.  92\n93.  93\n94.  94\n95.  95\n96.  96\n97.  97\n\n```typescript\n\ndb.resource_ownerships.aggregate( [\n    {\n        $lookup:\n        {\n            from: \"resources\",\n            localField: \"resource\",\n            foreignField: \"_id\",\n            as: \"resource\"\n        }\n    },\n    {\n        $unwind:\n        {\n            path: \"$resource\"\n        }\n    },\n    {\n        $lookup:\n        {\n            from: \"users\",\n            localField: \"owner\",\n            foreignField: \"_id\",\n            as: \"owner\"\n        }\n    },\n    {\n        $unwind:\n        {\n            path: \"$owner\"\n        }\n    },\n    {\n        $unwind:\n        {\n            path: \"$owner.emails\"\n        }\n    },\n    {\n        $addFields:\n        {\n            resource_id: {\n                $switch: {\n                    branches: [\n                        {\n                            case: { \n                                $eq: [\"$resource.resource_type\", \"file\"]\n                            }, \n                            then: \"$resource.path\" \n                        },\n                        {\n                            case: { \n                                $eq: [\"$resource.resource_type\", \"directory\"]\n                            }, \n                            then: \"$resource.path\" \n                        },\n                        {\n                            case: { \n                                $eq: [\"$resource.resource_type\", \"commit\"]\n                            }, \n                            then: \"$resource.hash\" \n                        },\n                        {\n                            case: { \n                                $eq: [\"$resource.resource_type\", \"repository\"]\n                            }, \n                            then: \"$resource.name\" \n                        },\n                        {\n                            case: { \n                                $eq: [\"$resource.resource_type\", \"table\"]\n                            }, \n                            then: \"$resource.name\" \n                        },\n                        {\n                            case: { \n                                $eq: [\"$resource.resource_type\", \"database\"]\n                            }, \n                            then: \"$resource.name\" \n                        }\n                    ]\n                }\n            }\n        }\n    },\n    {\n        $project: {\n            _id: false,\n            email: \"$owner.emails\",\n            resource_type: \"$resource.resource_type\",\n            id: \"$resource_id\"\n        }\n    }\n ] )\n\n```\n\nWith document databases, the freeform structure makes inserting data trivial, but writing and validating queries a significant challenge. Migrating data relies on complete knowledge of its layout to ensure that no errors are introduced. When the layout of the data changes, any queries or code that rely on the previous structure stop working. The complex and brittle aggregation pipelines are particularly difficult to maintain and troubleshoot, especially when utilising lookups across multiple collections.\n\n[Learn more](https://typedb.com/philosophy)\n\n1.  1\n2.  2\n3.  3\n4.  4\n5.  5\n6.  6\n7.  7\n8.  8\n9.  9\n10.  10\n11.  11\n12.  12\n13.  13\n14.  14\n15.  15\n16.  16\n17.  17\n18.  18\n19.  19\n20.  20\n21.  21\n22.  22\n23.  23\n24.  24\n25.  25\n26.  26\n27.  27\n28.  28\n29.  29\n30.  30\n31.  31\n32.  32\n33.  33\n\n```cypher\n\nMATCH\n    (user:User)-[:OWNS]->(rsrc:Resource)\nWITH\n    rsrc,\n    [user.primary_email] + user.alias_emails AS emails,\n    labels(rsrc) AS resource_types,\n    keys(rsrc) AS properties\nUNWIND emails AS email\nUNWIND resource_types AS resource_type\nWITH\n    rsrc, email, resource_type, properties,\n    {\n        File: \"path\",\n        Directory: \"path\",\n        Commit: \"hash\",\n        Repository: \"name\",\n        Table: \"name\",\n        Database: \"name\"\n    } AS id_type_map\nWHERE resource_type IN keys(id_type_map)\nAND id_type_map[resource_type] IN properties\nRETURN email, resource_type, rsrc[id_type_map[resource_type]] AS id\n\n```\n\nIn graph databases, properties are attached directly to the nodes that own them rather than being nodes themselves. Relocating attributes between nodes or reifying relations causes breaking changes to queries that rely on them. These changes to the logical data model and queries must be manually carried out due to the lack of a schema to define structure. Those model discrepancies can lead to data inconsistency and integrity issues.\n\n[Learn more](https://typedb.com/philosophy)\n\nQueries run in real-time on a single source of truth\n----------------------------------------------------\n\nTypeDB has the performance to resolve even complex queries in milliseconds. So you never need to precompute results or store redundant copies, which can result in stale, inconsistent and incorrect results. Work with a single source of truth, all the time.\n\n[##### TypeDB](https://typedb.com/#impact-2-typedb)[##### Relational](https://typedb.com/#impact-2-relational)[##### Document](https://typedb.com/#impact-2-document)[##### Graph](https://typedb.com/#impact-2-graph)\n\n1.  1\n2.  2\n3.  3\n4.  4\n5.  5\n6.  6\n7.  7\n8.  8\n9.  9\n10.  10\n11.  11\n12.  12\n13.  13\n14.  14\n15.  15\n16.  16\n17.  17\n18.  18\n19.  19\n20.  20\n21.  21\n22.  22\n23.  23\n24.  24\n25.  25\n26.  26\n27.  27\n28.  28\n29.  29\n30.  30\n31.  31\n32.  32\n33.  33\n\n```typeql\n\ndefine\n  rule transitive-team-membership:\n    when {\n      (team: $team-1, member: $team-2) isa team-membership;\n      (team: $team-2, member: $member) isa team-membership;   \n    } then {\n      (team: $team-1, member: $member) isa team-membership;\n    };\n\nmatch\n  $user isa user, has email $email;\n  $team isa team, has name $name;\n  (team: $team, member: $user) isa team-membership;\nfetch\n  $email;\n  $name;\n```\n\nTypeDB's built-in reasoning engine allows rules to be defined in the schema and resolved at query time. Rules are constructed using first-order logic and define how new facts can be inferred from existing data. When a query is issued, matching rules are triggered using the most recent data available. This allows all computed data to be built on a single source of truth, ensuring accuracy and consistency without delay or redundancy.\n\n[Learn more](https://typedb.com/philosophy)\n\n1.  1\n2.  2\n3.  3\n4.  4\n5.  5\n6.  6\n7.  7\n8.  8\n9.  9\n10.  10\n11.  11\n12.  12\n13.  13\n14.  14\n15.  15\n16.  16\n17.  17\n18.  18\n19.  19\n20.  20\n21.  21\n22.  22\n23.  23\n24.  24\n25.  25\n26.  26\n27.  27\n28.  28\n29.  29\n30.  30\n31.  31\n32.  32\n33.  33\n\n```sql\n\nCREATE PROCEDURE reload_inherited_team_memberships()\nLANGUAGE SQL\nBEGIN ATOMIC\nTRUNCATE TABLE inherited_team_memberships;\nWITH RECURSIVE parent_teams (team, member) AS (\n    SELECT team_memberships.team, team_memberships.member\n    FROM team_memberships\n    WHERE team_memberships.member IN (\n        SELECT id\n        FROM user\n    )\n    UNION ALL\n    SELECT team_memberships.team, team_memberships.member\n    FROM team_memberships\n    JOIN parent_teams\n    ON parent_teams.team = team_memberships.member\n)\nINSERT INTO inherited_team_memberships (team, member)\nSELECT team, member\nFROM parent_teams;\nCOMMIT;\nEND;\n\nSELECT users.email AS email, teams.name AS name\nFROM inherited_team_memberships\nJOIN users\nON users.id = inherited_team_memberships.member\nJOIN teams\nON teams.id = inherited_team_memberships.team;\n\n```\n\nSQL's stored procedures enable computed data to be generated periodically. As modern data has grown in complexity, they have ceased to be performant enough for real-time use. Stale data accumulates as updates aren't immediately reflected, creating inconsistencies between the source and derived data. Scripts calling multiple procedures can even leave the data in an incorrect state due to propagating errors or race conditions.\n\n[Learn more](https://typedb.com/philosophy)\n\n1.  1\n2.  2\n3.  3\n4.  4\n5.  5\n6.  6\n7.  7\n8.  8\n9.  9\n10.  10\n11.  11\n12.  12\n13.  13\n14.  14\n15.  15\n16.  16\n17.  17\n18.  18\n19.  19\n20.  20\n21.  21\n22.  22\n23.  23\n24.  24\n25.  25\n26.  26\n27.  27\n28.  28\n29.  29\n30.  30\n31.  31\n32.  32\n33.  33\n34.  34\n35.  35\n36.  36\n37.  37\n38.  38\n39.  39\n40.  40\n41.  41\n42.  42\n43.  43\n44.  44\n45.  45\n46.  46\n47.  47\n48.  48\n49.  49\n50.  50\n51.  51\n52.  52\n53.  53\n54.  54\n55.  55\n56.  56\n57.  57\n58.  58\n59.  59\n60.  60\n61.  61\n62.  62\n63.  63\n64.  64\n65.  65\n66.  66\n67.  67\n68.  68\n69.  69\n70.  70\n71.  71\n72.  72\n\n```typescript\n\ninherited_team_memberships = db.team_memberships.aggregate([\n    {\n        $lookup: {\n            from: \"users\",\n            localField: \"member\",\n            foreignField: \"_id\",\n            as: \"member\"\n        }\n    },\n    {\n        $unwind: {\n            path: \"$member\"\n        }\n    },\n    {\n        $graphLookup: {\n            from: \"team_memberships\",\n            startWith: \"$team\",\n            connectFromField: \"team\",\n            connectToField: \"member\",\n            as: \"parent_teams\"\n        }\n    },\n    {\n        $project: {\n            _id: false,\n            email: \"$member.email\",\n            team: {\n                $setUnion: [\n                    [\n                        \"$team\"\n                    ],\n                    \"$parent_teams.team\"\n                ]\n            }\n        }\n    },\n    {\n        $unwind: {\n            path: \"$team\"\n        }\n    },\n    {\n        $lookup: {\n            from: \"teams\",\n            localField: \"team\",\n            foreignField: \"_id\",\n            as: \"team\"\n        }\n    },\n    {\n        $unwind: {\n            path: \"$team\"\n        }\n    },\n    {\n        $project: {\n            email: \"$email\",\n            name: \"$team.name\"\n        }\n    }\n])\n\ndb.inherited_team_memerships.remove({})\n\ndb.inherited_team_memberships.insertMany(inherited_team_memberships)\n\ndb.inherited_team_memberships.find({})\n\n```\n\nDocument databases struggle to query efficiently when foreign document references are used to connect multiple collections. Lookup functions in aggregation pipelines require developers to explicitly identify and traverse every possible path between documents, forming a long and brittle pipeline. Missing or dissimilar fields in input documents silently generate bad data, requiring the pipeline to be painstakingly debugged stage-by-stage.\n\n[Learn more](https://typedb.com/philosophy)\n\n1.  1\n2.  2\n3.  3\n4.  4\n5.  5\n6.  6\n7.  7\n8.  8\n9.  9\n10.  10\n11.  11\n12.  12\n13.  13\n14.  14\n15.  15\n16.  16\n17.  17\n18.  18\n19.  19\n20.  20\n21.  21\n22.  22\n23.  23\n24.  24\n25.  25\n26.  26\n27.  27\n28.  28\n29.  29\n30.  30\n31.  31\n32.  32\n33.  33\n34.  34\n35.  35\n36.  36\n\n```cypher\n\nMATCH\n    ()<-[sub:SUBJECT]-(perm:InheritedPermission)-[obj:OBJECT]->(),\n    (perm)-[act:ACTION]->()\nDELETE sub, obj, act, perm;\n\nMATCH\n    (perm:Permission),\n    (user:User),\n    (rsrc:Resource),\n    (actn:Action)\nWHERE (\n    (perm)-[:SUBJECT]->(user:User)\n    OR (perm)-[:SUBJECT]->(:Team)<-[:MEMBER_OF*]-(user:User)\n) AND (\n    (perm)-[:OBJECT]->(rsrc:Resource)\n    OR (perm)-[:OBJECT]->(:Collection)<-[:MEMBER_OF*]-(rsrc:Resource)\n) AND (\n    (perm)-[:ACTION]->(actn:Action)\n    OR (perm)-[:ACTION]->(:ActionSet)<-[:MEMBER_OF*]-(actn:Action)\n) AND NOT EXISTS {\n    MATCH (user)<-[:SUBJECT]-(perm:InheritedPermission)-[:OBJECT]->(rsrc)\n    WHERE EXISTS ( (perm)-[:ACTION]->(actn) )\n}\nWITH user, rsrc, actn\nCREATE (user)<-[:SUBJECT]-(perm:InheritedPermission)-[:OBJECT]->(rsrc)\nWITH actn, perm\nCREATE (perm)-[:ACTION]->(actn);\n\nMATCH\n    (user:User)<-[:SUBJECT]-(perm:InheritedPermission)-[:OBJECT]->(rsrc:Resource),\n    (perm)-[:ACTION]->(actn:Action)\nRETURN user, rsrc, actn;\n\n```\n\nNeo4j excels at identifying simple transitive relationships, but branching patterns are harder to express. This forces developers to specify all potential combinations of nodes, relationships, and properties, resulting in unmaintainable queries and poor performance. Because Neo4j lacks the expressive power of symbolic reasoning, these queries must be periodically executed to precompute the results, leading to stale and inconsistent data.\n\n[Learn more](https://typedb.com/philosophy)\n\nRobust developer tools\n----------------------\n\nWe provide and maintain a whole ecosystem of reliable tools and documentation that make developing with TypeDB a joy.\n\n![Image 1](https://cdn.sanity.io/images/xndl14mc/production/155165f0cc5ee20cff88c35e1f99b713e8bf99f4-122x123.svg)\n\n### Instant setup\n\nRun in a local Docker container or on AWS, GCP, and Azure with TypeDB Cloud, no dependencies/config needed.\n\n[Learn more](https://typedb.com/features#easy-management)\n\n![Image 2](https://cdn.sanity.io/images/xndl14mc/production/824ee0b564cec05d4f237c2677788290e5c87c14-98x98.svg)\n\n### Powerful tools\n\nManage databases, build and execute queries, and explore results with TypeDB Studio, a cross-platform IDE.\n\n[Learn more](https://typedb.com/features#beautiful-ide)\n\n![Image 3](https://cdn.sanity.io/images/xndl14mc/production/4cec005d7ad071a62dd9d9aa448eaa5bbfbe3a5e-122x122.svg)\n\n### Robust APIs\n\nBuild complex and high-volume transactional applications with reactive and resilient open-source clients.\n\n[Learn more](https://typedb.com/features#robust-api)\n\nFull support for your favorite language\n---------------------------------------\n\nWe provide and officially support native drivers for all the languages below. Our APIs are asynchronous, reactive, stateful, and programmatic.\n\n[View GitHub](https://github.com/typedb/typedb-driver)[Learn more](https://typedb.com/features#robust-api)\n\n![Image 4](https://cdn.sanity.io/images/xndl14mc/production/ab13e13e9e80739a028cebafa573e54fb6829338-24x24.svg)\n\n### Rust\n\n[Docs](https://typedb.com/docs/drivers/rust/)[GitHub](https://github.com/typedb/typedb-driver/tree/development/rust)[Crates](https://crates.io/crates/typedb-driver)\n\n```bash\ncargo add typedb-driver\n```\n\nCopied!\n\n![Image 5](https://cdn.sanity.io/images/xndl14mc/production/68d44774342a7581484946ef9a901ef8473ab42f-24x24.svg)\n\n### Python\n\n[Docs](https://typedb.com/docs/drivers/python/)[GitHub](https://github.com/typedb/typedb-driver/tree/development/python)[PyPI](https://pypi.org/project/typedb-driver/)\n\n```bash\npip install typedb-driver\n```\n\nCopied!\n\n![Image 6](https://cdn.sanity.io/images/xndl14mc/production/80203aedede5473affd93c6c10f2340f85da6ce4-24x24.svg)\n\n### Node.js\n\n[Docs](https://typedb.com/docs/drivers/nodejs/)[GitHub](https://github.com/typedb/typedb-driver/tree/development/nodejs)[NPM](https://www.npmjs.com/package/typedb-driver)\n\n```bash\nnpm install typedb-driver\n```\n\nCopied!\n\n![Image 7](https://cdn.sanity.io/images/xndl14mc/production/2d280a0f8d94a8c0a91212f68959c45002fc68c1-24x24.svg)\n\n### Java\n\n[Docs](https://typedb.com/docs/drivers/java/)[GitHub](https://github.com/typedb/typedb-driver/tree/development/java)[Repo](https://cloudsmith.io/~typedb/repos/public-release/packages/detail/maven/typedb-driver/latest/a=noarch;xg=com.vaticle.typedb/#versions)\n\n```bash\ncom.vaticle.typedb:typedb-driver\n```\n\nCopied!\n\n![Image 8](https://cdn.sanity.io/images/xndl14mc/production/4125050b6d901fd2b4bac8e54498c80791ab2804-24x24.svg)\n\n### C#\n\n[Docs](https://typedb.com/docs/drivers/csharp/)[GitHub](https://github.com/typedb/typedb-driver/tree/development/csharp)[NuGet](https://www.nuget.org/packages/TypeDB.Driver)\n\n```bash\ndotnet add package TypeDB.Driver\n```\n\nCopied!\n\n![Image 9](https://cdn.sanity.io/images/xndl14mc/production/3c7b8e539122da6c35d70e3e3d05e92d49a3973f-24x24.svg)\n\n### C++\n\n[Docs](https://typedb.com/docs/drivers/cpp/)[GitHub](https://github.com/typedb/typedb-driver/tree/development/cpp)\n\n```bash\n#include <typedb.hpp>\n```\n\nCopied!\n\n![Image 10](https://cdn.sanity.io/images/xndl14mc/production/08b3b2caf2328cce2286b939ff345a8f8409fc3c-24x24.svg)\n\n### C\n\n[Docs](https://typedb.com/docs/drivers/c/)[GitHub](https://github.com/typedb/typedb-driver/tree/development/c)\n\n```bash\n#include <typedb_driver.h>\n```\n\nCopied!\n\n![Image 11](https://cdn.sanity.io/images/xndl14mc/production/beb19f8321a818703272403e53f9930dc7c64d56-24x24.svg)\n\n### Go\n\nComing Soon\n\n[GitHub](https://github.com/typedb/typedb-driver)\n\n```bash\ngo get github.com/typedb/typedb-driver/go\n```\n\n### Request your language\n\n[Submit request on GitHub](https://github.com/typedb/typedb-driver/issues/new?template=LANGUAGE_DRIVER_REQUEST.md)\n\nGet started in the cloud for free\n---------------------------------\n\nTypeDB Cloud is a fully-managed cloud database for your application, starting at $0/month with generous limits. Once your application needs it, upgrade for enterprise-level availability, auto-scaling, security and access control.\n\n[Learn more](https://typedb.com/cloud)[Sign up](https://cloud.typedb.com/)\n\n<table _ngcontent-ng-c1754233176=\"\" class=\"section kpt-table\"><tr _ngcontent-ng-c1754233176=\"\"><th _ngcontent-ng-c1754233176=\"\"><div _ngcontent-ng-c1754233176=\"\"><img _ngcontent-ng-c1754233176=\"\" alt=\"\" src=\"https://cdn.sanity.io/images/xndl14mc/production/4596f6068f9568b76050dbb978b16594dbe0a02d-122x122.svg\"></div></th><td _ngcontent-ng-c1754233176=\"\"><div _ngcontent-ng-c1754233176=\"\"><h3 _ngcontent-ng-c1754233176=\"\">Global deployment, cloud agnostic</h3><td-rich-text _ngcontent-ng-c1754233176=\"\" _nghost-ng-c2447835960=\"\"><p>Deploy in regions across AWS, GCP, and Azure, with different databases in different cloud providers and regions.</p></td-rich-text></div></td></tr><tr _ngcontent-ng-c1754233176=\"\"><th _ngcontent-ng-c1754233176=\"\"><div _ngcontent-ng-c1754233176=\"\"><img _ngcontent-ng-c1754233176=\"\" alt=\"\" src=\"https://cdn.sanity.io/images/xndl14mc/production/422715c61defdd3ca41a240d7060f7b21160b9f6-98x99.svg\"></div></th><td _ngcontent-ng-c1754233176=\"\"><div _ngcontent-ng-c1754233176=\"\"><h3 _ngcontent-ng-c1754233176=\"\">Scalability on demand, native clustering</h3><td-rich-text _ngcontent-ng-c1754233176=\"\" _nghost-ng-c2447835960=\"\"><p>Connect to clusters with topology-aware clients which can load balance requests across multiple replicas within a cluster.</p></td-rich-text></div></td></tr><tr _ngcontent-ng-c1754233176=\"\"><th _ngcontent-ng-c1754233176=\"\"><div _ngcontent-ng-c1754233176=\"\"><img _ngcontent-ng-c1754233176=\"\" alt=\"\" src=\"https://cdn.sanity.io/images/xndl14mc/production/91278fff998feb62bcf4708aaf9a50e475651cec-79x98.svg\"></div></th><td _ngcontent-ng-c1754233176=\"\"><div _ngcontent-ng-c1754233176=\"\"><h3 _ngcontent-ng-c1754233176=\"\">Secure by default, roles and encryption</h3><td-rich-text _ngcontent-ng-c1754233176=\"\" _nghost-ng-c2447835960=\"\"><p>Ensure a high level of protection to safeguard data and maintain confidentiality with fully secured by default, with authentication as well as storage and network encryption.</p></td-rich-text></div></td></tr><tr _ngcontent-ng-c1754233176=\"\"><th _ngcontent-ng-c1754233176=\"\"><div _ngcontent-ng-c1754233176=\"\"><img _ngcontent-ng-c1754233176=\"\" alt=\"\" src=\"https://cdn.sanity.io/images/xndl14mc/production/2600889b186d1a121946bf7a4d8838125d6ffc09-145x98.svg\"></div></th><td _ngcontent-ng-c1754233176=\"\"><div _ngcontent-ng-c1754233176=\"\"><h3 _ngcontent-ng-c1754233176=\"\">Always available, automatic failover</h3><td-rich-text _ngcontent-ng-c1754233176=\"\" _nghost-ng-c2447835960=\"\"><p>Guarantee constant access to data thanks to synchronous replication and replicas which will automatically failover if the primary fails.</p></td-rich-text></div></td></tr><tr _ngcontent-ng-c1754233176=\"\"><th _ngcontent-ng-c1754233176=\"\"><div _ngcontent-ng-c1754233176=\"\"><img _ngcontent-ng-c1754233176=\"\" alt=\"\" src=\"https://cdn.sanity.io/images/xndl14mc/production/19628ad84b647bdbc783df17ce2ea89c8fd507a3-98x108.svg\"></div></th><td _ngcontent-ng-c1754233176=\"\"><div _ngcontent-ng-c1754233176=\"\"><h3 _ngcontent-ng-c1754233176=\"\">Teams and projects, organizational governance</h3><td-rich-text _ngcontent-ng-c1754233176=\"\" _nghost-ng-c2447835960=\"\"><p>Create teams, members and projects to manage databases across the entire organization with ease.</p></td-rich-text></div></td></tr></table>\n\nSupported by a global community\n-------------------------------\n\nThe TypeDB community is vibrant, active and always helpful. Join us on Discord or make contributions on GitHub. New faces are always welcome.\n\n[Discord](https://typedb.com/discord)[Twitter](https://twitter.com/typedb_)[YouTube](https://www.youtube.com/@typedb)[LinkedIn](https://www.linkedin.com/company/typedb)\n\nDevelopers love TypeDB\n----------------------\n\n_With its simple yet immensely powerful query language, native support for N-ary relationships and focus on semantic schema, TypeDB solves all our modeling problems so that we can focus more on solving higher level problems instead of tweaking traditional graph databases to fit our use cases._\n\n![Image 17](https://cdn.sanity.io/images/xndl14mc/production/787654f81cf58b7d1a0ef7c73438f6b43d07b365-600x600.jpg?h=48&fit=max&auto=format)\n\n**Ram Anvesh**\n\nSoftware Engineer , Flipkart\n\n![Image 18](https://cdn.sanity.io/images/xndl14mc/production/8b7e187f0ae08fac913832ee1fbc4494ee7829a6-174x66.png?h=48&fit=max&auto=format)\n\n_TypeDB enables us to model the supply chains of large Global CPG clients and identify environmental and social risks. We have found its strongly typed nature and expressivity to be world leading, allowing our customers to gain novel insights. With TypeDB, we can solve problems at the world's greatest companies._\n\n![Image 19](https://cdn.sanity.io/images/xndl14mc/production/b63934a2ec513688770e3e80d2da7637aa4ea657-230x230.png?h=48&fit=max&auto=format)\n\n**Dixit Shah**\n\nManaging Consultant , IBM\n\n![Image 20](https://cdn.sanity.io/images/xndl14mc/production/4f7e4ae55e4406c28e04afed7c97a9fa3987c642-130x66.png?h=48&fit=max&auto=format)\n\n_For developers, TypeDB is really easy to work with. Its unique and expressive type system enables us to spend less time data modeling. We can easily integrate complex biomedical datasets. TypeDB provides us the backbone to our therapeutics platform to cure neurodegenerative diseases._\n\n![Image 21](https://cdn.sanity.io/images/xndl14mc/production/cda856204f69afe7fe0dbd27cf036a647e491766-700x700.jpg?h=48&fit=max&auto=format)\n\n**Nik Sharma**\n\nFounder & CEO , BioCorteX\n\n![Image 22](https://cdn.sanity.io/images/xndl14mc/production/7902faf2dadbf765ff0b6ef83e59c75f7bd2426f-172x66.png?h=48&fit=max&auto=format)\n\n_TypeDB's expressivity allows us to unify all levels of cyber intelligence for cyber security knowledge management systems. Through nested and hyper relations, we can easily represent TTPs and observables, attribution and victimology. During an attack, this gives analysts 360 views of any observable._\n\n![Image 23](https://cdn.sanity.io/images/xndl14mc/production/1ddcf229d21f9c0806b9ea83a45fc65f6abd0326-400x400.jpg?h=48&fit=max&auto=format)\n\n**Samuel Hassine**\n\nCo-founder & CEO , Filigran\n\n![Image 24](https://cdn.sanity.io/images/xndl14mc/production/36308892d96c9be68e3c1420fc2cfb628d2ad913-172x66.png?h=48&fit=max&auto=format)\n\n_TypeDB is a powerful framework for data exploration. The way data, attributes and relations can be expressed in a polymorphic manner allows us to build a rich network of multi-levels analysis and open opportunities to query, discover and infer interactions._\n\n![Image 25](https://cdn.sanity.io/images/xndl14mc/production/d79a18335d962432e5ccfd712774691045804be8-600x600.png?h=48&fit=max&auto=format)\n\n**Jean-Paul Mochet**\n\nChief Enterprise Architect , Capgemini\n\n![Image 26](https://cdn.sanity.io/images/xndl14mc/production/bc977fa82e624cbc4f2397023561010f7963cafe-172x66.png?h=48&fit=max&auto=format)\n\n_TypeDB provides a strongly-typed database with N-ary relations that enables modeling the world much closer to reality compared to other databases. In addition, its built-in inference engine enables to build next generation AI systems — one of the many reasons to choose TypeDB to model biomedical data._\n\n![Image 27](https://cdn.sanity.io/images/xndl14mc/production/b61c98203a790a007aee25d64f4092304ce97ddc-2574x2574.jpg?h=48&fit=max&auto=format)\n\n**Konrad Myśliwiec**\n\nData Scientist Engineer , Roche\n\n![Image 28](https://cdn.sanity.io/images/xndl14mc/production/130bee6de7836c0e6bd488695363397d8c346205-128x66.png?h=48&fit=max&auto=format)\n\n_TypeDB makes it easy for our robots to operate autonomously in the real world by being the centre of their understanding. TypeDB makes it easy to incorporate expert knowledge and advanced reasoning into its knowledge base._\n\n![Image 29](https://cdn.sanity.io/images/xndl14mc/production/11257036b3887e8c90d649508109fc5780c86f38-400x400.jpg?h=48&fit=max&auto=format)\n\n**Joris Sijs**\n\nSystem Architect , Avular\n\n![Image 30](https://cdn.sanity.io/images/xndl14mc/production/0ccf774f3d7464e2390a2575bd69f4125c191eb5-172x66.png?h=48&fit=max&auto=format)\n\nGet started\n-----------\n\n### Start building\n\nCloud or container, a polymorphic database with a conceptual data model, a strong subtyping system, a symbolic reasoning engine, and a type-theoretic language is minutes away.\n\n[Deploy](https://typedb.com/deploy)\n\n#### Learn more\n\n*   [Read philosophy](https://typedb.com/philosophy)\n*   [Review features](https://typedb.com/features)\n*   [Visit learning center](https://typedb.com/learn)\n*   [Join Discord community](https://typedb.com/discord)\n\n[Subscribe to Newsletter](https://typedb.com/?dialog=newsletter)\n\n[Discord](https://typedb.com/discord)[Twitter](https://twitter.com/typedb_)[YouTube](https://www.youtube.com/@typedb)[LinkedIn](https://www.linkedin.com/company/typedb)\n\n### Connect\n\n*   [Discuss on Forum](https://forum.typedb.com/)\n*   [Chat on Discord](https://typedb.com/discord)\n*   [Contact Us](https://typedb.com/?dialog=contact)\n*   [Provide Feedback](https://typedb.com/?dialog=feedback)\n\n### Technology\n\n*   [Philosophy](https://typedb.com/philosophy)\n*   [Features](https://typedb.com/features)\n*   [Cloud](https://typedb.com/cloud)\n\n### Documentation\n\n*   [Overview](https://typedb.com/docs/home/)\n*   [Manual](https://typedb.com/docs/manual/)\n*   [TypeDB Drivers](https://typedb.com/docs/drivers/)\n*   [TypeQL](https://typedb.com/docs/typeql/)\n\n### Resources\n\n*   [Lectures](https://typedb.com/lectures)\n*   [Papers](https://typedb.com/papers)\n*   [Blog](https://typedb.com/blog)\n\n### Company\n\n*   [LinkedIn](https://www.linkedin.com/company/typedb)\n*   [Careers](https://apply.workable.com/typedb/)\n*   [Privacy Policy](https://typedb.com/legal/privacy-policy)\n*   [Terms of Service](https://typedb.com/legal/terms-of-service)\n\n[Feedback](https://typedb.com/?dialog=feedback)",
    "usage": {
      "tokens": 15783
    }
  }
}