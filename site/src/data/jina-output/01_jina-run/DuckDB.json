{
  "code": 200,
  "status": 20000,
  "data": {
    "links": {
      "": "https://duckdb.org/2025/03/06/gems-of-duckdb-1-2.html",
      "Documentation": "https://duckdb.org/docs/",
      "Getting Started": "https://duckdb.org/docs",
      "Installation": "https://duckdb.org/#quickinstall",
      "Guides": "https://duckdb.org/docs/guides/overview",
      "Data Import": "https://duckdb.org/docs/data/overview",
      "Client APIs": "https://duckdb.org/docs/api/overview",
      "SQL Introduction": "https://duckdb.org/docs/sql/introduction",
      "Why DuckDB": "https://duckdb.org/why_duckdb",
      "FAQ": "https://duckdb.org/faq",
      "Resources": "https://duckdb.org/#",
      "Blog": "https://duckdb.org/news/",
      "Media": "https://duckdb.org/media",
      "Events": "https://duckdb.org/events",
      "Webshop": "https://shop.duckdb.org/",
      "GitHub 27.2k": "https://github.com/duckdb/duckdb",
      "Support": "https://duckdblabs.com/#support",
      "Live demo": "https://shell.duckdb.org/#queries=v0,%20%20-Create-table-from-Parquet-file%0ACREATE-TABLE-train_services-AS%0A----FROM-'s3%3A%2F%2Fduckdb%20blobs%2Ftrain_services.parquet'~,%20%20-Get-the-top%203-busiest-train-stations%0ASELECT-station_name%2C-count(*)-AS-num_services%0AFROM-train_services%0AGROUP-BY-ALL%0AORDER-BY-num_services-DESC%0ALIMIT-3~",
      "install": "https://duckdb.org/docs/installation",
      "Read more": "https://duckdb.org/why_duckdb#free",
      "client APIs": "https://duckdb.org/docs/stable/clients/overview",
      "rich SQL dialect": "https://duckdb.org/docs/stable/sql/introduction",
      "DuckDB Foundation": "https://duckdb.org/foundation/",
      "https://github.com/duckdb/duckdb/releases/download/v1.2.1/duckdb_cli-windows-amd64.zip": "https://github.com/duckdb/duckdb/releases/download/v1.2.1/duckdb_cli-windows-amd64.zip",
      "duckdb_odbc-osx-universal.zip": "https://github.com/duckdb/duckdb/releases/download/v1.1.0/duckdb_odbc-osx-universal.zip",
      "https://github.com/duckdb/duckdb/releases/download/v1.2.1/duckdb_odbc-linux-amd64.zip": "https://github.com/duckdb/duckdb/releases/download/v1.1.0/duckdb_odbc-linux-amd64.zip",
      "https://github.com/duckdb/duckdb/releases/download/v1.2.1/duckdb_odbc-windows-amd64.zip": "https://github.com/duckdb/duckdb/releases/download/v1.1.0/duckdb_odbc-windows-amd64.zip",
      "All blog posts": "https://duckdb.org/news",
      "Code of Conduct": "https://duckdb.org/code_of_conduct",
      "Trademark Use": "https://duckdb.org/trademark_guidelines",
      "Release Calendar": "https://duckdb.org/docs/dev/release_calendar",
      "RSS Feed": "https://duckdb.org/feed.xml",
      "Status Page": "https://status.duckdb.org/",
      "DuckDB Labs": "https://duckdblabs.com/",
      "Community Extensions": "https://duckdb.org/community_extensions/",
      "Bluesky": "https://bsky.app/profile/duckdb.org",
      "LinkedIn": "https://www.linkedin.com/company/duckdb/posts",
      "X (Twitter)": "https://twitter.com/duckdb",
      "Discord": "https://discord.duckdb.org/",
      "Stack Overflow": "https://stackoverflow.com/questions/tagged/duckdb"
    },
    "title": "An in-process SQL OLAP database management system",
    "description": "DuckDB is an in-process SQL OLAP database management system. Simple, feature-rich, fast & open source.",
    "url": "https://duckdb.org/",
    "content": "DuckDB – An in-process SQL OLAP database management system\n===============\n\n[![Image 1: DuckDB Logo for Download](https://duckdb.org/images/logo-dl/DuckDB_Logo-horizontal.svg)](https://duckdb.org/)\n\n[Documentation](https://duckdb.org/docs/)\n\n*   [Getting Started](https://duckdb.org/docs)\n*   [Installation](https://duckdb.org/docs/installation/)\n*   [Guides](https://duckdb.org/docs/guides/index)\n*   [Data Import](https://duckdb.org/docs/data/overview)\n*   [Client APIs](https://duckdb.org/docs/api/overview)\n*   [SQL Introduction](https://duckdb.org/docs/sql/introduction)\n*   [Why DuckDB](https://duckdb.org/why_duckdb)\n*   [FAQ](https://duckdb.org/faq)\n\n[Resources](https://duckdb.org/#)\n\n*   [Blog](https://duckdb.org/news/)\n*   [Media](https://duckdb.org/media/)\n*   [Events](https://duckdb.org/events/)\n*   [Webshop](https://shop.duckdb.org/)\n\n[GitHub 27.2k](https://github.com/duckdb/duckdb)\n\n[Support](https://duckdblabs.com/#support)\n\n[Support](https://duckdblabs.com/#support)\n\nSearch Shortcut cmd + k | ctrl + k\n\nDuckDB is a fast  \n\nin-process|\n\n  \ndatabase system\n===================================================\n\nQuery and transform your data anywhere  \nusing DuckDB's feature-rich SQL dialect\n\n[Installation](https://duckdb.org/#quickinstall) [Documentation](https://duckdb.org/docs/)\n\n*   SQL\n*   Python\n*   R\n*   Java\n*   Node.js\n\n1  \n2  \n3  \n4  \n5  \n6  \n7  \n8  \n\n```sql\n-- Get the top-3 busiest train stations\nSELECT\n    station_name,\n    count(*) AS num_services\nFROM train_services\nGROUP BY ALL\nORDER BY num_services DESC\nLIMIT 3;\n```\n\nAggregation query\n\n*   Aggregation query\n*   Join query\n*   Read remote CSV files\n*   Read remote Parquet files\n*   Spatial extension\n\n[Live demo](https://shell.duckdb.org/#queries=v0,%20%20-Create-table-from-Parquet-file%0ACREATE-TABLE-train_services-AS%0A----FROM-'s3%3A%2F%2Fduckdb%20blobs%2Ftrain_services.parquet'~,%20%20-Get-the-top%203-busiest-train-stations%0ASELECT-station_name%2C-count(*)-AS-num_services%0AFROM-train_services%0AGROUP-BY-ALL%0AORDER-BY-num_services-DESC%0ALIMIT-3~)\n\nDuckDB at a glance\n==================\n\n### Simple\n\nDuckDB is easy to [install](https://duckdb.org/docs/installation) and deploy. It has zero external dependencies and runs in-process in its host application or as a single binary.\n\n[Read more](https://duckdb.org/why_duckdb#simple)\n\n### Portable\n\nDuckDB runs on Linux, macOS, Windows, Android, iOS and all popular hardware architectures. It has idiomatic [client APIs](https://duckdb.org/docs/stable/clients/overview) for major programming languages.\n\n[Read more](https://duckdb.org/why_duckdb#portable)\n\n### Feature-rich\n\nDuckDB offers a [rich SQL dialect](https://duckdb.org/docs/stable/sql/introduction). It can read and write file formats such as CSV, Parquet, and JSON, to and from the local file system and remote endpoints such as S3 buckets.\n\n[Read more](https://duckdb.org/why_duckdb#feature-rich)\n\n### Fast\n\nDuckDB runs analytical queries at blazing speed thanks to its columnar engine, which supports parallel execution and can process larger-than-memory workloads.\n\n[Read more](https://duckdb.org/why_duckdb#fast)\n\n### Extensible\n\nDuckDB is extensible by third-party features such as new data types, functions, file formats and new SQL syntax. User contributions are available as community extensions.\n\n[Read more](https://duckdb.org/why_duckdb#extensible)\n\n### Free\n\nDuckDB and its core extensions are open-source under the permissive MIT License. The intellectual property of the project is held by the [DuckDB Foundation](https://duckdb.org/foundation).\n\n[Read more](https://duckdb.org/why_duckdb#free)\n\nInstallation\n============\n\nDuckDB is seamlessly integrated with major programming languages. It can be installed in less than 10 seconds on most platforms.\n\n[More installation options](https://duckdb.org/docs/installation/)\n\n*   Command line\n*   Python\n*   R\n*   Java\n*   Node.js\n*   ODBC\n*   Rust\n*   Go\n\n```bash\ncurl https://install.duckdb.org | sh\n```\n\nLatest release: DuckDB 1.2.1 | System detected: Linux\n\n```bash\npip install duckdb\n```\n\n```r\ninstall.packages(\"duckdb\")\n```\n\n```xml\n<dependency>\n\t<groupId>org.duckdb</groupId>\n\t<artifactId>duckdb_jdbc</artifactId>\n\t<version>1.2.0</version>\n</dependency>\n```\n\n```bash\nnpm install @duckdb/node-api\n```\n\n```bash\ncurl https://install.duckdb.org | sh\n```\n\n```bash\ncurl https://install.duckdb.org | sh\n```\n\n[https://github.com/duckdb/duckdb/releases/download/v1.2.1/duckdb\\_cli-windows-amd64.zip](https://github.com/duckdb/duckdb/releases/download/v1.2.1/duckdb_cli-windows-amd64.zip)\n\n[duckdb\\_odbc-osx-universal.zip](https://github.com/duckdb/duckdb/releases/download/v1.1.0/duckdb_odbc-osx-universal.zip)\n\n[https://github.com/duckdb/duckdb/releases/download/v1.2.1/duckdb\\_odbc-linux-amd64.zip](https://github.com/duckdb/duckdb/releases/download/v1.1.0/duckdb_odbc-linux-amd64.zip)\n\n[https://github.com/duckdb/duckdb/releases/download/v1.2.1/duckdb\\_odbc-windows-amd64.zip](https://github.com/duckdb/duckdb/releases/download/v1.1.0/duckdb_odbc-windows-amd64.zip)\n\n```bash\ncargo add duckdb --features bundled\n```\n\n```bash\ngo get github.com/marcboeker/go-duckdb\n```\n\nBlog\n====\n\n[](https://duckdb.org/2025/03/07/parquet-bloom-filters-in-duckdb.html \"Parquet Bloom Filters in DuckDB\")\n\n![Image 2: Parquet Bloom Filters in DuckDB](https://duckdb.org/images/blog/thumbs/bloom-filters.svg)\n\ndeep dive\n\n### Parquet Bloom Filters in DuckDB\n\n2025-03-07\n\nHannes Mühleisen\n\n[](https://duckdb.org/2025/03/06/gems-of-duckdb-1-2.html \"Gems of DuckDB 1.2\")\n\n![Image 3: Gems of DuckDB 1.2](https://duckdb.org/images/blog/thumbs/gems-of-duckdb-1-2.svg)\n\nreleases\n\n### Gems of DuckDB 1.2\n\n2025-03-06\n\nThe DuckDB team\n\n[All blog posts](https://duckdb.org/news)\n\nAggregation query Join query Read CSV files Read Parquet files from S3 Spatial extension\n\nSQL query Pandas integration Custom UDFs\n\nSQL query duckplyr dplyr integration\n\nSQL query Appender\n\nSQL query Web service integration\n\n```sql\n-- Get the top-3 busiest train stations\nSELECT\n    station_name,\n    count(*) AS num_services\nFROM train_services\nGROUP BY ALL\nORDER BY num_services DESC\nLIMIT 3;\n```\n\n```sql\n-- Load CSV file to a table. DuckDB auto-detects\n-- the CSV's format, column name and types\nCREATE TABLE stations AS\n    FROM 's3://duckdb-blobs/stations.csv';\n```\n\n```sql\n-- Directly query Parquet file in S3\nSELECT\n    station_name,\n    count(*) AS num_services\nFROM 's3://duckdb-blobs/train_services.parquet'\nGROUP BY ALL\nORDER BY num_services DESC\nLIMIT 10;\n```\n\n```sql\n-- Find the top-3 longest domestic train routes\nSELECT s1.name_short, s2.name_short, d.distance\nFROM distances d\nJOIN stations s1 ON d.station1 = s1.code\nJOIN stations s2 ON d.station2 = s2.code\nWHERE s1.country = s2.country\n  AND s1.code < s2.code\nORDER BY distance DESC\nLIMIT 3;\n```\n\n```sql\n-- List the closest IC stations (as the crow flies)\nSELECT\n    s1.name_long AS station1,\n    s2.name_long AS station2,\n    ST_Distance(\n        ST_Point(s1.geo_lng, s1.geo_lat),\n        ST_Point(s2.geo_lng, s2.geo_lat)\n    ) * 111_139 AS distance\nFROM stations s1, stations s2\nWHERE s1.type LIKE '%Intercity%'\n  AND s2.type LIKE '%Intercity%'\n  AND s1.id < s2.id\nORDER BY distance ASC\nLIMIT 3;\n```\n\n```python\n# Get the top-3 busiest train stations\nimport duckdb\nduckdb.sql(\"\"\"\n    SELECT station, count(*) AS num_services\n    FROM train_services\n    GROUP BY ALL\n    ORDER BY num_services DESC\n    LIMIT 3;\n    \"\"\")\n```\n\n```python\n# Reading and writing Pandas dataframes\nimport pandas as pd\nimport duckdb\n\ndf_in = pd.DataFrame({\n    'station': ['Delft', 'Delft', 'Gouda', 'Gouda'],\n    'day': ['Mon', 'Tue', 'Mon', 'Tue'],\n    'num_services' : [22, 20, 27, 25]})\n\n# Run query on a dataframe and return a dataframe\ndf_out = duckdb.sql(\"\"\"\n    SELECT station, sum(num_services)\n    FROM df_in\n    GROUP BY station\n    \"\"\").to_df()\n```\n\n```python\n# Create custom user-defined function\nimport duckdb\n\ndef plus_one(x):\n    return x + 1\n\ncon = duckdb.connect()\ncon.create_function('plus_one', plus_one,\n    ['BIGINT'], 'BIGINT', type='native')\n\ncon.sql(\"\"\"\n    SELECT sum(plus_one(i)) FROM range(10) tbl(i);\n    \"\"\")\n```\n\n```r\n# Find the largest sepals/petals in the Iris data set\nlibrary(duckdb)\n\ncon <- dbConnect(duckdb())\nduckdb_register(con, \"iris\", iris)\n\nquery <- r'(\n    SELECT count(*) AS num_observations,\n    max(\"Sepal.Width\") AS max_width,\n    max(\"Petal.Length\") AS max_petal_length\n    FROM iris\n    WHERE \"Sepal.Length\" > 5\n    GROUP BY ALL\n    )'\n\ndbGetQuery(con, query)\n```\n\n```r\n# Find the largest sepals/petals in the Iris data set\n# using duckplyr\nlibrary(\"duckplyr\")\n\niris |>\n    filter(Sepal.Length > 5) |>\n    group_by(Species) |>\n    summarize(\n        num_observations = n(),\n        max_width = max(Sepal.Width),\n        max_petal_length = max(Petal.Length),\n        na.rm = TRUE) |>\n    collect()\n```\n\n```r\n# Find the largest sepals/petals in the Iris data set\n# using dplyr\nlibrary(\"duckdb\")\nlibrary(\"dplyr\")\n\ncon <- dbConnect(duckdb())\nduckdb_register(con, \"iris\", iris)\ntbl(con, \"iris\") |>\n    filter(Sepal.Length > 5) |>\n    group_by(Species) |>\n    summarize(\n        num_observations = count(),\n        max_width = max(Sepal.Width),\n        max_petal_length = max(Petal.Length),\n        na.rm = TRUE) |>\n    collect()\n```\n\n```java\n// Get a list of train stations by traffic\nConnection conn =\n    DriverManager.getConnection(\"jdbc:duckdb:\");\nStatement st = conn.createStatement();\nResultSet rs = st.executeQuery(\n    \"SELECT station_name,\\n\" +\n    \"       count(*) AS num_services\\n\" +\n    \"FROM train_services\\n\" +\n    \"GROUP BY ALL\\n\" +\n    \"ORDER BY num_services DESC;\");\n\nSystem.out.println(rs.next());\n```\n\n```java\n// Perform bulk inserts using the Appender API\nDuckDBConnection conn = (DuckDBConnection)\n    DriverManager.getConnection(\"jdbc:duckdb:\");\nStatement st = conn.createStatement();\nst.execute(\"CREATE TABLE person \" +\n    \"(name VARCHAR, age INT)\");\n\nvar appender = conn.createAppender(\n    DuckDBConnection.DEFAULT_SCHEMA, \"person\");\n\nappender.beginRow();\nappender.append(\"MC Ducky\");\nappender.append(49);\nappender.endRow();\nappender.close();\n```\n\n```javascript\n// Get the top-3 busiest train stations in May\nimport { DuckDBInstance } from '@duckdb/node-api';\nconst instance = await DuckDBInstance.create();\nconst connection = await instance.connect();\nconst reader = await connection.runAndReadAll(\n  `SELECT station_name, count(*) AS num_services\n   FROM\n   'http://blobs.duckdb.org/train_services.parquet'\n   WHERE monthname(date) = 'May'\n   GROUP BY ALL\n   ORDER BY num_services DESC\n   LIMIT 3;`\n);\nconsole.table(reader.getRows());\n```\n\n```javascript\n// Web Service Integration:\n// Create endpoint to generate numbers\nimport express from \"express\";\nimport { DuckDBInstance } from '@duckdb/node-api';\nconst app = express();\nconst instance = await DuckDBInstance.create();\nconst connection = await instance.connect();\napp.get(\"/getnumbers\", async (req, res) => {\n  const reader = await connection.runAndReadAll(\n    \"SELECT random() AS num FROM range(10)\");\n  res.end(JSON.stringify(reader.getRows()));\n});\n\napp.listen(8082, () => console.log(\n  \"Go to: http://localhost:8082/getnumbers\"));\n```\n\n###### Documentation\n\n[Getting Started](https://duckdb.org/docs)  \n[Installation](https://duckdb.org/docs/installation/)  \n[Guides](https://duckdb.org/docs/guides/overview)  \n[Data Import](https://duckdb.org/docs/data/overview)  \n[Client APIs](https://duckdb.org/docs/api/overview)  \n[SQL Introduction](https://duckdb.org/docs/sql/introduction)  \n[Why DuckDB](https://duckdb.org/why_duckdb)  \n[FAQ](https://duckdb.org/faq)  \n\n###### Resources\n\n[Blog](https://duckdb.org/news)  \n[Media](https://duckdb.org/media)  \n[Events](https://duckdb.org/events)  \n[Webshop](https://shop.duckdb.org/)  \n[Code of Conduct](https://duckdb.org/code_of_conduct)  \n[Trademark Use](https://duckdb.org/trademark_guidelines)  \n[Release Calendar](https://duckdb.org/docs/dev/release_calendar)  \n[RSS Feed](https://duckdb.org/feed.xml)  \n[Status Page](https://status.duckdb.org/)\n\n###### Organizations\n\n[DuckDB Foundation](https://duckdb.org/foundation/)  \n[DuckDB Labs](https://duckdblabs.com/)\n\n###### Community\n\n[Community Extensions](https://duckdb.org/community_extensions/)  \n[Bluesky](https://bsky.app/profile/duckdb.org)  \n[LinkedIn](https://www.linkedin.com/company/duckdb/posts)  \n[X (Twitter)](https://twitter.com/duckdb)  \n[Discord](https://discord.duckdb.org/)  \n[Stack Overflow](https://stackoverflow.com/questions/tagged/duckdb)\n\n© 2025 DuckDB Foundation, Amsterdam NL",
    "usage": {
      "tokens": 3498
    }
  }
}