{
  "code": 200,
  "status": 20000,
  "data": {
    "links": {
      "": "https://www.patreon.com/gingerbill",
      "Docs": "https://odin-lang.org/docs",
      "Packages": "https://pkg.odin-lang.org/",
      "News": "https://odin-lang.org/news",
      "Showcase": "https://odin-lang.org/showcase",
      "Forum": "https://forum.odin-lang.org/",
      "Community": "https://odin-lang.org/community",
      "GitHub": "https://github.com/odin-lang/Odin",
      "Overview": "https://odin-lang.org/docs/overview",
      "Download": "https://odin-lang.org/docs/install",
      "See the Full Demo": "https://github.com/odin-lang/Odin/blob/master/examples/demo/demo.odin",
      "See More Examples": "https://github.com/odin-lang/examples",
      "Join Discord": "https://discord.gg/vafXTdubwr",
      "orthogonality": "https://en.wikipedia.org/wiki/Orthogonality_(programming)",
      "memory management": "https://odin-lang.org/docs/overview/#implicit-context-system",
      "allocators": "https://odin-lang.org/docs/overview/#allocators",
      "SOA data types": "https://odin-lang.org/docs/overview/#soa-data-types",
      "array programming": "https://odin-lang.org/docs/overview/#fixed-arrays",
      "JangaFX": "https://jangafx.com/",
      "EmberGen": "https://jangafx.com/software/embergen/",
      "GeoGen": "https://jangafx.com/software/geogen/",
      "LiquiGen": "https://jangafx.com/software/liquigen/",
      "Learn More": "https://odin-lang.org/showcase/embergen",
      "ChiAhaâ„¢": "https://chiaha.ai/",
      "core": "https://github.com/odin-lang/Odin/tree/master/core",
      "OpenGL": "https://pkg.odin-lang.org/vendor/OpenGL",
      "Vulkan": "https://pkg.odin-lang.org/vendor/vulkan",
      "Direct3D11": "https://pkg.odin-lang.org/vendor/directx/d3d11",
      "Direct3D12": "https://pkg.odin-lang.org/vendor/directx/d3d12",
      "Metal": "https://pkg.odin-lang.org/vendor/darwin/Metal",
      "wgpu": "https://pkg.odin-lang.org/vendor/wgpu",
      "WebGL 1 & 2": "https://github.com/odin-lang/Odin/tree/master/vendor/wasm/WebGL",
      "SDL2": "https://pkg.odin-lang.org/vendor/sdl2",
      "GLFW": "https://pkg.odin-lang.org/vendor/glfw",
      "raylib": "https://pkg.odin-lang.org/vendor/raylib",
      "microui": "https://pkg.odin-lang.org/vendor/microui",
      "miniaudio": "https://pkg.odin-lang.org/vendor/miniaudio",
      "vendor": "https://pkg.odin-lang.org/vendor",
      "See Vendor Library": "https://github.com/odin-lang/Odin/tree/master/vendor",
      "issue tracker": "https://github.com/odin-lang/odin/issues",
      "help wanted": "https://github.com/odin-lang/Odin/issues?q=is%3Aopen+is%3Aissue+label%3A%22help+wanted%22",
      "HulyÂ® Platformâ„¢": "https://huly.io/",
      "Twitch": "https://www.twitch.tv/ginger_bill",
      "YouTube": "https://www.youtube.com/channel/UCUSck1dOH7VKmG4lRW7tZXg",
      "Issues": "https://github.com/odin-lang/Odin/issues"
    },
    "title": "Odin Programming Language",
    "description": "",
    "url": "https://odin-lang.org/",
    "content": "Odin Programming Language\n=============== \n\n[![Image 1: Odin](https://odin-lang.org/logo.svg)](https://odin-lang.org/)\n\n*   [Home](https://odin-lang.org/)\n*   [Docs](https://odin-lang.org/docs)\n*   [Packages](https://pkg.odin-lang.org/)\n*   [News](https://odin-lang.org/news)\n*   [Showcase](https://odin-lang.org/showcase)\n*   [Forum](https://forum.odin-lang.org/)\n*   [Community](https://odin-lang.org/community)\n*   [GitHub](https://github.com/odin-lang/Odin)\n*   Appearance:\n\n![Image 2: Odin](https://odin-lang.org/logo.svg)\n\n**Odin** Programming Language\n=============================\n\nThe Data-Oriented Language for Sane Software Development.\n---------------------------------------------------------\n\n[Overview](https://odin-lang.org/docs/overview) [Download](https://odin-lang.org/docs/install)\n\nProgramming Done Right\n----------------------\n\nOdin is a general-purpose programming language with distinct typing built for high performance, modern systems and data-oriented programming.\n\nOdin is the C alternative for the Joy of Programming.\n\n[Read the Docs](https://odin-lang.org/docs) [See the Full Demo](https://github.com/odin-lang/Odin/blob/master/examples/demo/demo.odin) [See More Examples](https://github.com/odin-lang/examples)\n\n```odin\npackage main\n\nimport \"core:fmt\"\n\nmain :: proc() {\n\tprogram := \"+ + * ðŸ˜ƒ - /\"\n\taccumulator := 0\n\n\tfor token in program {\n\t\tswitch token {\n\t\tcase '+': accumulator += 1\n\t\tcase '-': accumulator -= 1\n\t\tcase '*': accumulator *= 2\n\t\tcase '/': accumulator /= 2\n\t\tcase 'ðŸ˜ƒ': accumulator *= accumulator\n\t\tcase: // Ignore everything else\n\t\t}\n\t}\n\n\tfmt.printf(\"The program \\\"%s\\\" calculates the value %d\\n\",\n\t           program, accumulator)\n}\n```\n\n```odin\npackage main\n\nimport \"core:fmt\"\n\nmain :: proc() {\n\t{\n\t\ta := [3]f32{1, 2, 3}\n\t\tb := [3]f32{5, 6, 7}\n\t\tc := a * b\n\t\td := a + b\n\t\te := 1 + (c - d) / 2\n\t\tfmt.printf(\"%.1f\\n\", e) // [0.5, 3.0, 6.5]\n\t}\n\n\t{\n\t\ta := [3]f32{1, 2, 3}\n\t\tb := swizzle(a, 2, 1, 0)\n\t\tassert(b == [3]f32{3, 2, 1})\n\n\t\tc := a.xx\n\t\tassert(c == [2]f32{1, 1})\n\t\tassert(c == 1)\n\n\t\td := swizzle(a, 0, 0)\n\t\tassert(d == [2]f32{1, 1})\n\t\tassert(d == 1)\n\t}\n\n\t{\n\t\tVector3 :: distinct [3]f32\n\t\ta := Vector3{1, 2, 3}\n\t\tb := Vector3{5, 6, 7}\n\t\tc := (a * b)/2 + 1\n\t\td := c.x + c.y + c.z\n\t\tfmt.printf(\"%.1f\\n\", d) // 22.0\n\n\t\tcross :: proc(a, b: Vector3) -> Vector3 {\n\t\t\ti := a.yzx * b.zxy\n\t\t\tj := a.zxy * b.yzx\n\t\t\treturn i - j\n\t\t}\n\n\t\tcross_explicit :: proc(a, b: Vector3) -> Vector3 {\n\t\t\ti := swizzle(a, 1, 2, 0) * swizzle(b, 2, 0, 1)\n\t\t\tj := swizzle(a, 2, 0, 1) * swizzle(b, 1, 2, 0)\n\t\t\treturn i - j\n\t\t}\n\n\t\tblah :: proc(a: Vector3) -> f32 {\n\t\t\treturn a.x + a.y + a.z\n\t\t}\n\n\t\tx := cross(a, b)\n\t\tfmt.println(x)\n\t\tfmt.println(blah(x))\n\t}\n}\n```\n\n```odin\npackage main\n\nimport \"core:fmt\"\n\nmain :: proc() {\n\t{\n\t\tVector3 :: struct {x, y, z: f32}\n\n\t\tN :: 2\n\t\tv_aos: [N]Vector3\n\t\tv_aos[0].x = 1\n\t\tv_aos[0].y = 4\n\t\tv_aos[0].z = 9\n\n\t\tfmt.println(len(v_aos))\n\t\tfmt.println(v_aos[0])\n\t\tfmt.println(v_aos[0].x)\n\t\tfmt.println(&v_aos[0].x)\n\n\t\tv_aos[1] = {0, 3, 4}\n\t\tv_aos[1].x = 2\n\t\tfmt.println(v_aos[1])\n\t\tfmt.println(v_aos)\n\n\t\tv_soa: #soa[N]Vector3\n\n\t\tv_soa[0].x = 1\n\t\tv_soa[0].y = 4\n\t\tv_soa[0].z = 9\n\n\n\t\t// Same syntax as AOS and treat as if it was an array\n\t\tfmt.println(len(v_soa))\n\t\tfmt.println(v_soa[0])\n\t\tfmt.println(v_soa[0].x)\n\t\tfmt.println(&v_soa[0].x)\n\t\tv_soa[1] = {0, 3, 4}\n\t\tv_soa[1].x = 2\n\t\tfmt.println(v_soa[1])\n\n\t\t// Can use SOA syntax if necessary\n\t\tv_soa.x[0] = 1\n\t\tv_soa.y[0] = 4\n\t\tv_soa.z[0] = 9\n\t\tfmt.println(v_soa.x[0])\n\n\t\t// Same pointer addresses with both syntaxes\n\t\tassert(&v_soa[0].x == &v_soa.x[0])\n\n\n\t\t// Same fmt printing\n\t\tfmt.println(v_aos)\n\t\tfmt.println(v_soa)\n\t}\n\t{\n\t\t// Works with arrays of length <= 4 which have the implicit fields xyzw/rgba\n\t\tVector3 :: distinct [3]f32\n\n\t\tN :: 2\n\t\tv_aos: [N]Vector3\n\t\tv_aos[0].x = 1\n\t\tv_aos[0].y = 4\n\t\tv_aos[0].z = 9\n\n\t\tv_soa: #soa[N]Vector3\n\n\t\tv_soa[0].x = 1\n\t\tv_soa[0].y = 4\n\t\tv_soa[0].z = 9\n\t}\n\t{\n\t\t// SOA Slices\n\t\t// Vector3 :: struct {x, y, z: f32}\n\t\tVector3 :: struct {x: i8, y: i16, z: f32}\n\n\t\tN :: 3\n\t\tv: #soa[N]Vector3\n\t\tv[0].x = 1\n\t\tv[0].y = 4\n\t\tv[0].z = 9\n\n\t\ts: #soa[]Vector3\n\t\ts = v[:]\n\t\tassert(len(s) == N)\n\t\tfmt.println(s)\n\t\tfmt.println(s[0].x)\n\n\t\ta := s[1:2]\n\t\tassert(len(a) == 1)\n\t\tfmt.println(a)\n\n\t\td: #soa[dynamic]Vector3\n\n\t\tappend_soa(&d, Vector3{1, 2, 3}, Vector3{4, 5, 9}, Vector3{-4, -4, 3})\n\t\tfmt.println(d)\n\t\tfmt.println(len(d))\n\t\tfmt.println(cap(d))\n\t\tfmt.println(d[:])\n\t}\n\t{ // soa_zip and soa_unzip\n\t\tfmt.println(\"\\nsoa_zip and soa_unzip\")\n\n\t\tx := []i32{1, 3, 9}\n\t\ty := []f32{2, 4, 16}\n\t\tz := []b32{true, false, true}\n\n\t\t// produce an #soa slice the normal slices passed\n\t\ts := soa_zip(a=x, b=y, c=z)\n\n\t\t// iterate over the #soa slice\n\t\tfor v, i in s {\n\t\t\tfmt.println(v, i) // exactly the same as s[i]\n\t\t\t// NOTE: 'v' is NOT a temporary value but has a specialized addressing mode\n\t\t\t// which means that when accessing v.a etc, it does the correct transformation\n\t\t\t// internally:\n\t\t\t//         s[i].a === s.a[i]\n\t\t\tfmt.println(v.a, v.b, v.c)\n\t\t}\n\n\t\t// Recover the slices from the #soa slice\n\t\ta, b, c := soa_unzip(s)\n\t\tfmt.println(a, b, c)\n\t}\n}\n```\n\n```odin\npackage main\n\nimport \"core:mem\"\n\nmain :: proc() {\n\t// In each scope, there is an implicit value named context. This\n\t// context variable is local to each scope and is implicitly passed\n\t// by pointer to any procedure call in that scope (if the procedure\n\t// has the Odin calling convention).\n\n\t// The main purpose of the implicit context system is for the ability\n\t// to intercept third-party code and libraries and modify their\n\t// functionality. One such case is modifying how a library allocates\n\t// something or logs something. In C, this was usually achieved with\n\t// the library defining macros which could be overridden so that the\n\t// user could define what they wanted. However, not many libraries\n\t// supported this in many languages by default which meant intercepting\n\t// third-party code to see what it does and to change how it does it is\n\t// not possible.\n\n\tc := context // copy the current scope's context\n\n\tcontext.user_index = 456\n\t{\n\t\tcontext.allocator = my_custom_allocator()\n\t\tcontext.user_index = 123\n\t\twhat_a_fool_believes() // the `context` for this scope is implicitly passed to `what_a_fool_believes`\n\t}\n\n\t// `context` value is local to the scope it is in\n\tassert(context.user_index == 456)\n\n\twhat_a_fool_believes :: proc() {\n\t\tc := context // this `context` is the same as the parent procedure that it was called from\n\t\t// From this example, context.user_index == 123\n\t\t// An context.allocator is assigned to the return value of `my_custom_allocator()`\n\t\tassert(context.user_index == 123)\n\n\t\t// The memory management procedure use the `context.allocator` by\n\t\t// default unless explicitly specified otherwise\n\t\tchina_grove := new(int)\n\t\tfree(china_grove)\n\n\t\t_ = c\n\t}\n\n\tmy_custom_allocator :: mem.nil_allocator\n\t_ = c\n\n\t// By default, the context value has default values for its parameters which is\n\t// decided in the package runtime. What the defaults are are compiler specific.\n\n\t// To see what the implicit context value contains, please see the following\n\t// definition in package runtime.\n}\n```\n\n```odin\npackage main\n\nimport \"core:fmt\"\nimport \"core:reflect\"\n\nmain :: proc() {\n\tFoo :: struct {\n\t\tx: int    `tag1`,\n\t\ty: string `json:\"y_field\"`,\n\t\tz: bool, // no tag\n\t}\n\n\tid := typeid_of(Foo)\n\tnames := reflect.struct_field_names(id)\n\ttypes := reflect.struct_field_types(id)\n\ttags  := reflect.struct_field_tags(id)\n\n\tassert(len(names) == len(types) && len(names) == len(tags))\n\n\tfmt.println(\"Foo :: struct {\")\n\tfor tag, i in tags {\n\t\tname, type := names[i], types[i]\n\t\tif tag != \"\" {\n\t\t\tfmt.printf(\"\\t%s: %T `%s`,\\n\", name, type, tag)\n\t\t} else {\n\t\t\tfmt.printf(\"\\t%s: %T,\\n\", name, type)\n\t\t}\n\t}\n\tfmt.println(\"}\")\n\n\tfor tag, i in tags {\n\t\tif val, ok := reflect.struct_tag_lookup(tag, \"json\"); ok {\n\t\t\tfmt.printf(\"json: %s -> %s\\n\", names[i], val)\n\t\t}\n\t}\n}\n```\n\nJoin the Odin community on Discord.\n-----------------------------------\n\n[Join Discord](https://discord.gg/vafXTdubwr)\n\nThe Odin Principles\n-------------------\n\n### Simplicity\n\nOdin has been designed for readability, scalability, and [orthogonality](https://en.wikipedia.org/wiki/Orthogonality_(programming)) of concepts. Simplicity is complicated to get right, clear is better than clever.\n\n### High Performance\n\nOdin allows for the highest performance through low-level control over the memory layout, [memory management](https://odin-lang.org/docs/overview/#implicit-context-system) and custom [allocators](https://odin-lang.org/docs/overview/#allocators) and so much more.\n\n### For Modern Systems\n\nOdin is designed from the bottom up for the modern computer, with built-in support for [SOA data types](https://odin-lang.org/docs/overview/#soa-data-types), [array programming](https://odin-lang.org/docs/overview/#fixed-arrays), and other features.\n\n### Joy of Programming\n\nWe go into programming because we love to solve problems. Why shouldn't our tools bring us joy whilst doing it? Enjoy programming again, with Odin!\n\n[See Overview](https://odin-lang.org/docs/overview)\n\nOdin in Production\n------------------\n\n[JangaFX](https://jangafx.com/) are the creators of the 3D animation software [EmberGen](https://jangafx.com/software/embergen/), [GeoGen](https://jangafx.com/software/geogen/), and LiquiGen, which are _all_ written _fully_ in Odin.\n\n[EmberGen](https://jangafx.com/software/embergen/) is a real-time volumetric fluid simulator that can instantly simulate, render, and export flipbooks, image sequences, and VDB volumes. With EmberGen, you can create anything from fire and smoke, to explosions and magic wisps. EmberGen gives you the creative freedom to iterate on your simulations in a few milliseconds instead of hours.\n\n[LiquiGen](https://jangafx.com/software/liquigen/) is a real-time volumetric liquid simulator that can instantly simulate, render, and export flipbooks, image sequences, and VDB volumes.\n\n[GeoGen](https://jangafx.com/software/geogen/) is a real-time terrain generation tool.\n\nThrough EmberGen, Odin runs in production among the giants of the games and film industries: Bethesda, CAPCOM, Codemasters, THQNordic, Warner Bros, Weta Digital, and many others.\n\nÂ [![Image 3: JangaFX](https://odin-lang.org/jangafx/logo.png) ### JangaFX](https://jangafx.com/)Â [![Image 4: EmberGen](https://odin-lang.org/jangafx/em_logo.png) ### EmberGen](https://jangafx.com/software/embergen/)  \nÂ [![Image 5: GeoGen](https://odin-lang.org/jangafx/geo_logo.png) ### GeoGen](https://jangafx.com/software/geogen/)Â [![Image 6: LiquiGen](https://odin-lang.org/jangafx/liquigen.svg) ### LiquiGen](https://jangafx.com/software/liquigen/)\n\nCompanies who use products by JangaFX\n\n![Image 7: JangaFX Customers](https://odin-lang.org/jangafx/companies/jangafx_logos_cluster.png)All product names, logos, and brands are property of their respective owners.\n\n[Learn More](https://odin-lang.org/showcase/embergen)\n\n[ChiAhaâ„¢](https://chiaha.ai/) Digital Twin Toolkit is written in Odin, and can help answer your factory flow questions.\n\n[![Image 8: ChiAha](https://odin-lang.org/chiaha/logo.png) ![Image 9: ChiAha](https://odin-lang.org/chiaha/flow.png)](https://chiaha.ai/)\n\n[ChiAhaâ„¢](https://chiaha.ai/) can predict production line performance and OEE within 1% accuracy. High-fidelity modeling constructs with statistically modeled data-driven behavior. Provide answers to many of the questions related to the design, operation and improvement of lines for optimum OEE:\n\n*   What is the effect on OEE of close-coupling?\n*   What speeds should each machine run?\n*   How can production be increased?\n*   How much will OEE improve with changes to the system?\n\n[Learn More](https://chiaha.ai/)\n\nBatteries Included\n------------------\n\nOdin comes with high quality packages out of the box in its [`core`](https://github.com/odin-lang/Odin/tree/master/core) library.\n\nOdin provides official libraries for all major graphics APIs: [OpenGL](https://pkg.odin-lang.org/vendor/OpenGL), [Vulkan](https://pkg.odin-lang.org/vendor/vulkan), [Direct3D11](https://pkg.odin-lang.org/vendor/directx/d3d11), [Direct3D12](https://pkg.odin-lang.org/vendor/directx/d3d12), [Metal](https://pkg.odin-lang.org/vendor/darwin/Metal), [wgpu](https://pkg.odin-lang.org/vendor/wgpu), and [WebGL 1 & 2](https://github.com/odin-lang/Odin/tree/master/vendor/wasm/WebGL).\n\nOdin additionally brings you officially maintained bindings for popular libraries such as [SDL2](https://pkg.odin-lang.org/vendor/sdl2), [GLFW](https://pkg.odin-lang.org/vendor/glfw), [raylib](https://pkg.odin-lang.org/vendor/raylib), [microui](https://pkg.odin-lang.org/vendor/microui), [miniaudio](https://pkg.odin-lang.org/vendor/miniaudio) and much more, in its [`vendor`](https://pkg.odin-lang.org/vendor) library!\n\n[See Core Library](https://github.com/odin-lang/Odin/tree/master/core) [See Vendor Library](https://github.com/odin-lang/Odin/tree/master/vendor)\n\n[![Image 10: Simple DirectMedia Layer](https://odin-lang.org/vendor/companies/Simple_DirectMedia_Layer_Logo.svg)](https://pkg.odin-lang.org/vendor/sdl2) [![Image 11: raylib](https://odin-lang.org/vendor/companies/raylib_64x64.png)](https://pkg.odin-lang.org/vendor/raylib) [![Image 12: OpenGL](https://odin-lang.org/vendor/companies/OpenGL_logo.svg)](https://pkg.odin-lang.org/vendor/OpenGL) [![Image 13: WebGL](https://odin-lang.org/vendor/companies/WebGL_Logo.svg)](https://github.com/odin-lang/Odin/tree/master/vendor/wasm/WebGL) [![Image 14: Vulkan](https://odin-lang.org/vendor/companies/Vulkan_logo.svg)](https://pkg.odin-lang.org/vendor/vulkan) [![Image 15: Metal](https://odin-lang.org/vendor/companies/Metal_2_Logo.png)](https://pkg.odin-lang.org/vendor/darwin/Metal) [![Image 16: DirectX](https://odin-lang.org/vendor/companies/DirectX_logo.svg)](https://github.com/odin-lang/Odin/tree/master/vendor/directx) [](https://pkg.odin-lang.org/vendor/wgpu)[![Image 17: microui](https://odin-lang.org/vendor/companies/microui_logo.png)](https://pkg.odin-lang.org/vendor/microui) [![Image 18: miniaudio](https://odin-lang.org/vendor/companies/miniaudio_logo.png)](https://pkg.odin-lang.org/vendor/miniaudio)All product names, logos, and brands are property of their respective owners.\n\nThe Odin Community\n------------------\n\n### Odin is Open Source\n\nOdin is an open source programming language and contributions from the community are welcome! If you want to help out, check the [issue tracker](https://github.com/odin-lang/odin/issues) for open issues that may interest you. Those labelled [help wanted](https://github.com/odin-lang/Odin/issues?q=is%3Aopen+is%3Aissue+label%3A%22help+wanted%22) are in particular need of community assistance right now.\n\nJoin the Odin Discord and help us bring the joy of programming in Odin to all. ðŸ¥³\n\n[Browse Source](https://github.com/odin-lang/Odin) [Join Discord](https://discord.gg/vafXTdubwr)\n\n### Thank You!\n\n[![Image 19: Odin GitHub Sponsors](https://odin-lang.org/images/github-sponsors-logo.png)](https://github.com/sponsors/odin-lang/)\n\n[![Image 20: Odin Patreon](https://odin-lang.org/Digital-Patreon-Wordmark_White.png)](https://www.patreon.com/gingerbill)\n\n[Sponsor Odin](https://github.com/sponsors/odin-lang/)\n\n  \n\n  \n\n#### GitHub Sponsors\n\nThank you to everyone who sponsor [Odin](https://github.com/sponsors/odin-lang/). In particular, these wonderful people sponsor Odin for $400/month or more:\n\n*   [HulyÂ® Platformâ„¢](https://huly.io/)\n\n[![Image 21: Odin](https://odin-lang.org/logo.svg)](https://odin-lang.org/)The Data-Oriented Language for Sane Software Development.\n\n#### Resources\n\n*   [Docs](https://odin-lang.org/docs)\n*   [Packages](https://pkg.odin-lang.org/)\n*   [News](https://odin-lang.org/news)\n\n#### Community\n\n*   [GitHub](https://github.com/odin-lang/Odin)\n*   [Discord](https://discord.gg/vafXTdubwr)\n*   [Twitch](https://www.twitch.tv/ginger_bill)\n*   [YouTube](https://www.youtube.com/channel/UCUSck1dOH7VKmG4lRW7tZXg)\n*   [Showcase](https://odin-lang.org/showcase)\n\n#### Contribute\n\n*   [Issues](https://github.com/odin-lang/Odin/issues)\n*   [Donate](https://www.patreon.com/gingerbill)\n\nÂ© 2016â€“2024 Ginger Bill",
    "usage": {
      "tokens": 4897
    }
  }
}