---
import "@styles/global.css";
import CardGrid from "@basics/CardGrid.astro";
import TagCloud from "@components/tool-components/TagCloud.astro";
import { getEntry, getCollection } from "astro:content";
import TrademarkRibbon from "@components/trademarks/TrademarkRibbon.astro";
import TubeContainerSVG from "@basics/tube-attempts/TubeContainerSVG.astro";
interface Tool {
  url: string;
  site_name?: string;
  title?: string;
  image?: string;
  favicon?: string;
  description?: string;
  tags?: string[];
  id: string;
}

const TRADEMARK_CONFIG = {
  sourceDir: "src/assets/Visuals/Tooling-Trademarks/usable--darkmode",
};

// ... existing type definitions ...

const toolEntries = await getCollection("tooling");
const tools = toolEntries.map((entry: any) => entry.data as Tool);
const featuresData = await getEntry("cards", "features");

const tagFrequencies = tools.reduce(
  (tagCounts: Record<string, number>, tool: Tool) => {
    tool.tags?.forEach((tag: any) => {
      tagCounts[tag] = (tagCounts[tag] || 0) + 1;
    });
    return tagCounts;
  },
  {} as Record<string, number>
);
// Get all unique tags from all tools
const allTags = [
  ...new Set(
    tools.flatMap((tool) => tool.tags || []).filter((tag) => tag) // Remove any undefined/null values
  ),
];
---

<div id="main-content-col">
  <section>
    <div id="hero-container">
      <h1>Here is the Main Content</h1>
    </div>

    <div class="main-content-element">
      <TubeContainerSVG />
    </div>
    <!-- Existing cards section -->
  </section>

  <section class="main-content-element">
    <h2>Tools</h2>
    <div class="tools-header">
      <TagCloud
        tags={allTags}
        tagFrequencies={tagFrequencies}
        visibleTagRowLimit={4}
        maxWidth="96%"
      />
    </div>
    <div id="ribbon main-content-element" style="overflow-x: clip;">
      <div id="ribbon-context">
        <h2>Tech we're watching.</h2>
      </div>
      <div class="main-content-element">
        <TrademarkRibbon
          sourceDir={TRADEMARK_CONFIG.sourceDir}
          width="auto"
          maxWidth="92%"
        />
      </div>
    </div>
    <div class="full-bleed separator--primary-bg-grd"></div>
  </section>
  <div class="main-content-element">
    {
      tools && tools.length > 0 ? (
        <CardGrid gap="2rem" tools={tools} />
      ) : (
        <p>No tools found</p>
      )
    }
  </div>
</div>

<style>
  h1,
  h2 {
    margin-top: 1rem;
  }

  .tools-header {
    margin-bottom: 2rem;
    display: flex;
    flex-direction: column;
    justify-content: center;
    gap: 2rem;
  }

  #main-content-col {
    width: 94%;
    margin: 0 auto;
    padding: 2rem 0;
    display: flex;
    flex-direction: column;
    align-items: center;
    overflow-x: visible;
    justify-content: center;
  }
  #hero-container {
    display: flex;
    background: var(--grd--lossless-eastern-crimson);
    padding: 2rem;
    border-radius: 1rem;
    width: 100%;
    justify-content: center;
    align-items: center;
  }

  .main-content-element {
    width: 92%;
    margin: 4% 0;
    padding: 1rem 0;
  }

  #ribbon {
    display: inline-flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    margin-bottom: 2rem;
    max-width: 90%;
    overflow-x: hidden;
  }
</style>
