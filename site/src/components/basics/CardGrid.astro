---
import ToolCard from "@components/tool-components/ToolCard.astro";
import BareToolCard from "@components/tool-components/BareToolCard.astro";

interface Props {
  columns?: number;
  gap?: string;
  minCardWidth?: string;
  tools: Array<{
    url: string;
    site_name?: string;
    title?: string;
    image?: string;
    favicon?: string;
    description?: string;
    tags?: string[];
    id: string;
  }>;
}

const { columns = 3, gap = "2rem", tools = [] } = Astro.props;

// Split tools into those with and without images
const toolsWithImages = tools.filter(tool => tool.image);
const toolsWithoutImages = tools.filter(tool => !tool.image);
---

<div class="cards-container">
  {toolsWithImages.length > 0 && (
    <section class="tools-section">
      <div class="card-grid">
        {toolsWithImages.map((tool) => (
          <ToolCard
            url={tool.url}
            site_name={tool.site_name}
            title={tool.title}
            image={tool.image}
            favicon={tool.favicon}
            description={tool.description}
            tags={tool.tags}
            filename={tool.id}
          />
        ))}
      </div>
    </section>
  )}

  {toolsWithoutImages.length > 0 && (
    <section class="tools-section bare-tools-section">
      <div class="bare-tools-grid">
        {toolsWithoutImages.map((tool) => (
          <BareToolCard
            url={tool.url}
            site_name={tool.site_name}
            title={tool.title}
            tags={tool.tags}
            filename={tool.id}
          />
        ))}
      </div>
    </section>
  )}
  
  {tools.length === 0 && (
    <p class="no-tools">No tools found</p>
  )}
</div>

<script is:inline>
  // Handle mouse position for cards
  const handleMouseMove = (e) => {
    const cards = document.getElementsByClassName("card");

    for (const card of cards) {
      const rect = card.getBoundingClientRect();
      const x = e.clientX - rect.left;
      const y = e.clientY - rect.top;

      card.style.setProperty("--mouse-x", `${x}px`);
      card.style.setProperty("--mouse-y", `${y}px`);
    }
  };

  // Add event listener when the document is ready
  document
    .querySelector(".cards-container")
    ?.addEventListener("mousemove", handleMouseMove);
</script>

<style define:vars={{ columns, gap }}>
  .cards-container {
    width: 100%;
    display: flex;
    flex-direction: column;
    gap: 2rem;
  }

  .card-grid {
    display: grid;
    grid-template-columns: repeat(var(--columns), 1fr);
    gap: var(--gap);
    width: 100%;
  }

  .tools-section {
    width: 100%;
    display: flex;
    flex-direction: column;
    align-items: center;
  }

  .tools-section h2 {
    font-size: var(--fs-600);
    color: var(--clr-heading);
    margin-bottom: 1.5rem;
    text-align: center;
  }

  .bare-tools-section {
    background-color: var(--clr-lossless-primary-dark);
    padding: 2rem;
    border-radius: 1rem;
  }

  .bare-tools-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
    gap: 1rem;
    width: 100%;
  }

  .no-tools {
    text-align: center;
    color: var(--clr-body);
    font-style: italic;
    padding: 2rem;
  }

  /* Card glow effects */
  :global(.card) {
    position: relative;
    background: transparent !important;
  }

  :global(.card)::before,
  :global(.card)::after {
    border-radius: inherit;
    content: "";
    height: 100%;
    left: 0;
    opacity: 0;
    position: absolute;
    top: 0;
    transition: opacity 500ms;
    width: 100%;
    pointer-events: none;
  }

  :global(.card)::before {
    background: radial-gradient(
      800px circle at var(--mouse-x) var(--mouse-y),
      var(--clr-lossless-primary-glass),
      transparent 40%
    );
    z-index: -1;
  }

  :global(.card)::after {
    background: radial-gradient(
      600px circle at var(--mouse-x) var(--mouse-y),
      rgba(174, 215, 245, 0.468),
      transparent 40%
    );
    z-index: -1;
  }

  :global(.card:hover)::before {
    opacity: 1;
  }

  :global(.cards-container:hover .card::after) {
    opacity: 0.1;
  }

  @media (max-width: 768px) {
/*     .cards-container {
      padding: 0 1rem;
    }

    .bare-tools-section {
      padding: 1rem;
    }

    .bare-tools-grid {
      grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
    }
  } */
</style>
