---
import fs from "node:fs";
import path from "node:path";

interface Props {
  svgPath: string;
  destinationDir: string;
}

const { svgPath, destinationDir } = Astro.props;

// Get the SVG content
const svgContent = fs.readFileSync(svgPath, "utf-8");

// Extract width from SVG for data attribute
const widthMatch = svgContent.match(/width="([^"]+)"/);
const width = widthMatch ? widthMatch[1] : "0";

// Function to move file (will be called by client script)
---

<div
  class="trademark-wrap"
  data-width={width}
  data-source={svgPath}
  data-destination={destinationDir}
>
  <button class="move-button" title="Move trademark">
    <span>â†’</span>
  </button>
  <div class="trademark-container" set:html={svgContent} />
</div>

<script>
  // Handle move button clicks
  document.querySelectorAll(".move-button").forEach((button) => {
    button.addEventListener("click", async (e) => {
      const wrap = (e.target as Element).closest(".trademark-wrap");
      if (!wrap) return;

      const sourcePath = wrap.getAttribute("data-source");
      const destDir = wrap.getAttribute("data-destination");

      if (!sourcePath || !destDir) return;

      try {
        // Call server endpoint to move file
        console.log("Moving file:", { sourcePath, destDir });

        const response = await fetch("/api/moveTrademark", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({
            source: sourcePath,
            destination: destDir,
          }),
        });

        if (!response.ok) {
          const errorData = await response
            .json()
            .catch(() => ({ error: `HTTP error! status: ${response.status}` }));
          throw new Error(errorData.error || "Failed to move trademark");
        }

        const data = await response.json();
        console.log("Successfully moved file:", data);

        // Remove the wrapper on success
        wrap.remove();
      } catch (error) {
        console.error("Error moving trademark:", error);
        alert(
          error instanceof Error
            ? error.message
            : "Error moving trademark. Check console for details."
        );
      }
    });
  });
</script>

<style>
  .trademark-wrap {
    position: relative;
    width: 100%;
    height: 160px;
    display: flex;
    align-items: center;
    justify-content: center;
    padding: 1rem;
    background: calc(var(--clr-lossless-primary-dark) * 0.1);
    border-radius: 0.5rem;
    border: 1px solid var(--clr-lossless-primary-light);
    transition: all 0.2s ease-in-out;
  }

  .trademark-wrap:hover {
    background: rgba(var(--clr-lossless-primary-dark), 0.2);
    border: 1px solid rgba(var(--clr-lossless-primary-light), 1);
  }

  .move-button {
    position: absolute;
    top: 0.5rem;
    right: 0.5rem;
    width: 2rem;
    height: 2rem;
    border-radius: 50%;
    border: none;
    background: var(--clr-lossless-primary-light);
    color: var(--clr-lossless-primary-dark);
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    opacity: 0;
    transition: opacity 0.2s ease-in-out;
  }

  .trademark-wrap:hover .move-button {
    opacity: 1;
  }

  .move-button:hover {
    background: var(--clr-lossless-primary-dark);
    color: var(--clr-lossless-primary-light);
  }

  .trademark-container {
    height: 100%;
    width: auto;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .trademark-container :global(svg) {
    height: 100%;
    width: auto;
    width: 100%;
    overflow: visible;
  }
</style>
