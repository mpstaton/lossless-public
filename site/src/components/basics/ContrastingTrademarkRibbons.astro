---
import TrademarkFragment from "@basics/TrademarkFragment.astro";
import fs from "node:fs";
import path from "node:path";

// Get all Astro component files from the tooling-trademarks directory
const componentsDir = path.join(
  process.cwd(),
  "src/assets/visuals-as-components/tooling-trademarks/"
);
let trademarkFiles: string[] = [];

try {
  // Read the directory and filter for trademark__ and wordmark__ Astro component files
  const files = fs.readdirSync(componentsDir);

  // Get trademark files
  const trademarkPrefixFiles = files
    .filter((file) => file.startsWith("trademark__") && file.endsWith(".astro"))
    .map((file) => file.replace("trademark__", "").replace(".astro", ""));

  // Get wordmark files
  const wordmarkPrefixFiles = files
    .filter((file) => file.startsWith("wordmark__") && file.endsWith(".astro"))
    .map((file) => file.replace("wordmark__", "").replace(".astro", ""));

  // Combine both sets, removing duplicates
  trademarkFiles = trademarkPrefixFiles.concat(wordmarkPrefixFiles);

  console.log(
    `Found ${trademarkFiles.length} trademark components (${trademarkPrefixFiles.length} trademarks, ${wordmarkPrefixFiles.length} wordmarks) in ${componentsDir}`
  );
} catch (error: unknown) {
  console.error(
    `Error reading components directory: ${error instanceof Error ? error.message : String(error)}`
  );
  // Provide empty array as fallback
  trademarkFiles = [];
}

// Check if classification file exists
let darkTrademarks: string[] = [];
let lightTrademarks: string[] = [];

try {
  const classificationPath = path.join(
    process.cwd(),
    "src/assets/svg-classification.json"
  );

  if (fs.existsSync(classificationPath)) {
    const classificationData = JSON.parse(
      fs.readFileSync(classificationPath, "utf8")
    );
    darkTrademarks = classificationData.dark || [];
    lightTrademarks = classificationData.light || [];

    console.log(
      `Loaded classification data: ${darkTrademarks.length} dark, ${lightTrademarks.length} light`
    );
  } else {
    console.log(
      "No classification data found, all trademarks will be in a single ribbon"
    );
    // If no classification data, put all trademarks in the light category
    lightTrademarks = trademarkFiles;
  }
} catch (error) {
  console.error("Error loading classification data:", error);
  // If error, put all trademarks in the light category
  lightTrademarks = trademarkFiles;
}

// Shuffle the logos array
function shuffle(array: string[]) {
  // Make a copy of the array to avoid modifying the original
  const arrayCopy = [...array];

  // Only shuffle if the array has elements
  if (arrayCopy.length <= 1) {
    return arrayCopy;
  }

  try {
    for (let i = arrayCopy.length - 1; i > 0; i--) {
      const j = Math.floor(Math.random() * (i + 1));
      [arrayCopy[i], arrayCopy[j]] = [arrayCopy[j], arrayCopy[i]];
    }
    return arrayCopy;
  } catch (error) {
    console.error("Error shuffling array:", error);
    return array; // Return original array if shuffle fails
  }
}

// Shuffle both dark and light trademarks
let darkTrademarksShuffled: string[] = [];
let lightTrademarksShuffled: string[] = [];

try {
  darkTrademarksShuffled = shuffle(darkTrademarks);
  lightTrademarksShuffled = shuffle(lightTrademarks);

  console.log("First few dark trademarks:", darkTrademarksShuffled.slice(0, 3));
  console.log(
    "First few light trademarks:",
    lightTrademarksShuffled.slice(0, 3)
  );
} catch (error) {
  console.error("Error in shuffle operation:", error);
  darkTrademarksShuffled = darkTrademarks;
  lightTrademarksShuffled = lightTrademarks;
}

// Make sure we have at least some logos to display
if (
  darkTrademarksShuffled.length === 0 &&
  lightTrademarksShuffled.length === 0
) {
  // Add some fallback logos if none were found
  lightTrademarksShuffled.push("fallback1", "fallback2", "fallback3");
  console.log("Using fallback trademarks");
}

// Debug info
const debugInfo = {
  totalTrademarks: trademarkFiles.length,
  darkTrademarks: darkTrademarksShuffled.length,
  lightTrademarks: lightTrademarksShuffled.length,
  componentsDir,
};
---

<div class="trademark-ribbons">
  {
    darkTrademarksShuffled.length > 0 && (
      <div class="trademark-ribbon dark-ribbon">
        <div class="ribbon">
          {darkTrademarksShuffled.map((trademark) => (
            <div class="trademark" data-key={trademark}>
              <TrademarkFragment trademark={trademark} />
            </div>
          ))}
          {/* Duplicate for seamless looping */}
          {darkTrademarksShuffled.map((trademark) => (
            <div class="trademark" data-key={`${trademark}`}>
              <TrademarkFragment trademark={trademark} />
            </div>
          ))}
        </div>
      </div>
    )
  }

  {
    lightTrademarksShuffled.length > 0 && (
      <div class="trademark-ribbon light-ribbon">
        <div class="ribbon reverse">
          {lightTrademarksShuffled.map((trademark) => (
            <div class="trademark" data-key={trademark}>
              <TrademarkFragment trademark={trademark} />
            </div>
          ))}
          {/* Duplicate for seamless looping */}
          {lightTrademarksShuffled.map((trademark) => (
            <div class="trademark" data-key={`${trademark}`}>
              <TrademarkFragment trademark={trademark} />
            </div>
          ))}
        </div>
      </div>
    )
  }

  <div class="debug-info">
    Found {debugInfo.totalTrademarks} trademarks ({debugInfo.darkTrademarks} dark,
    {debugInfo.lightTrademarks} light)
  </div>
</div>

<style>
  .trademark-ribbons {
    width: 100%;
    display: flex;
    flex-direction: column;
    object-fit: inherit;
    gap: 1rem;
  }

  .trademark-ribbon {
    width: 100%;
    height: 6vh;
    position: relative;
    padding: 1rem 0;
  }

  .dark-ribbon {
    background-color: #f8f8f8;
  }

  .light-ribbon {
    background-color: #222;
  }

  .ribbon {
    display: flex;
    animation: scroll 320s linear infinite;
    width: max-content;
  }

  .reverse {
    animation: scroll-reverse 360s linear infinite;
  }

  @keyframes scroll {
    0% {
      transform: translateX(0);
    }
    100% {
      transform: translateX(-50%);
    }
  }

  @keyframes scroll-reverse {
    0% {
      transform: translateX(-50%);
    }
    100% {
      transform: translateX(0);
    }
  }

  .trademark {
    flex: 0 0 auto;
    margin: 0 1rem;
    max-height: 2rem;
    display: flex;
    align-items: center;
    box-sizing: border-box;
    object-fit: contain;
  }

  .debug-info {
    font-size: 0.8rem;
    color: #666;
    margin-top: 1rem;
    padding: 0.5rem;
    background-color: #f5f5f5;
    border-radius: 4px;
    display: none;
  }
</style>
