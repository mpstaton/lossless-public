---
export interface Props {
  trademark: string;
}

const { trademark } = Astro.props as Props;
console.log("TrademarkFragment: Received trademark:", trademark);

// Dynamically import the Astro component
let Component = null;
try {
  // First try to import the trademark component
  try {
    const trademarkModule = await import(
      `../../assets/visuals-as-components/tooling-trademarks/trademark__${trademark}.astro`
    );
    Component = trademarkModule.default;
    console.log(
      `TrademarkFragment: Successfully loaded trademark component for ${trademark}`
    );
  } catch (trademarkError) {
    console.log(
      `No trademark component found for ${trademark}, trying wordmark...`
    );

    // If trademark import fails, try wordmark
    try {
      const wordmarkModule = await import(
        `../../assets/visuals-as-components/tooling-trademarks/wordmark__${trademark}.astro`
      );
      Component = wordmarkModule.default;
      console.log(
        `TrademarkFragment: Successfully loaded wordmark component for ${trademark}`
      );
    } catch (wordmarkError) {
      console.log(
        `Failed to load any component for ${trademark}. ` + wordmarkError
      );
      // Component will remain null if both imports fail
    }
  }
} catch (error) {
  console.error(`Unexpected error loading component for ${trademark}:`, error);
  // Component will remain null if import fails
}
---

<div class="trademark-wrapper">
  {Component && <Component />}
  {!Component && <div class="fallback">{trademark}</div>}
</div>

<style>
  .trademark-wrapper {
    width: 100%;
    height: 100%;
    display: flex;
    align-items: center;
    justify-content: center;
    box-sizing: border-box;
    object-fit: contain;
  }
  .fallback {
    font-size: 10px;
    color: #999;
    text-align: center;
    word-break: break-all;
    padding: 4px;
  }
</style>
