---
export interface Props {
  trademark: string;
}

const { trademark } = Astro.props as Props;
console.log("TrademarkFragment: Received trademark:", trademark);

/* // Dynamically import the Astro component
let Component = null;
try {
  // First try to import the trademark component
  try {
    const trademarkModule = await import(
      `../../assets/visuals-as-components/tooling-trademarks/trademark__${trademark}.astro`
    );
    Component = trademarkModule.default;
    console.log(
      `TrademarkFragment: Successfully loaded trademark component for ${trademark}`
    );
  } catch (trademarkError) {
    console.log(
      `No trademark component found for ${trademark}, trying wordmark...`
    );

    // If trademark import fails, try wordmark
    try {
      const wordmarkModule = await import(
        `../../assets/visuals-as-components/tooling-trademarks/wordmark__${trademark}.astro`
      );
      Component = wordmarkModule.default;
        `TrademarkFragment: Successfully loaded wordmark component for ${trademark}`
      );
    } catch (wordmarkError) {
        `Failed to load any component for ${trademark}. ` + wordmarkError
      );
      // Component will remain null if both imports fail
    }
  }
} catch (error) {
  console.error(`Unexpected error loading component for ${trademark}:`, error);
  // Component will remain null if import fails
} */

let Component = null;
try {
  // Import the component dynamically
  const module = await import(
    `../../assets/visuals-as-components/tooling-trademarks/trademark__${trademark}.astro`
  );
  Component = module.default;
  console.log(
    `TrademarkFragment: Successfully loaded component for ${trademark}`
  );
} catch (error) {
  console.error(`Failed to load component for ${trademark}:`, error);
  // Component will remain null if import fails
}
---

<div class="trademark-wrapper">
  {Component && <Component />}
  {!Component && <div class="fallback">{trademark}</div>}
</div>

<style>
  .trademark-wrapper {
    height: 100%;
    display: flex;
    align-items: center;
---
import TrademarkFragment from "@basics/TrademarkFragment.astro";
import fs from "node:fs";
import path from "node:path";

// Get all Astro component files from the tooling-trademarks directory
const componentsDir = path.join(
  process.cwd(),
  "src/assets/visuals-as-components/tooling-trademarks/"
);
let trademarkFiles: string[] = [];

try {
  // Read the directory and filter for trademark__ Astro component files
  const files = fs.readdirSync(componentsDir);
  trademarkFiles = files
    .filter((file) => file.startsWith("trademark__") && file.endsWith(".astro"))
    .map((file) => file.replace("trademark__", "").replace(".astro", ""));

  console.log(
    `Found ${trademarkFiles.length} trademark components in ${componentsDir}`
  );
} catch (error: unknown) {
  console.error(
    `Error reading components directory: ${error instanceof Error ? error.message : String(error)}`
  );
  // Provide empty array as fallback
  trademarkFiles = [];
}

// Shuffle the logos array
function shuffle(array: string[]) {
  // Make a copy of the array to avoid modifying the original
  const arrayCopy = [...array];

  // Only shuffle if the array has elements
  if (arrayCopy.length <= 1) {
    return arrayCopy;
  }

  try {
    for (let i = arrayCopy.length - 1; i > 0; i--) {
      const j = Math.floor(Math.random() * (i + 1));
      [arrayCopy[i], arrayCopy[j]] = [arrayCopy[j], arrayCopy[i]];
    }
    return arrayCopy;
  } catch (error) {
    console.error("Error shuffling array:", error);
    return array; // Return original array if shuffle fails
  }
}

let trademarksShuffled: string[] = [];
try {
  trademarksShuffled = shuffle(trademarkFiles);
  console.log("First few trademarks:", trademarksShuffled.slice(0, 5));
} catch (error) {
  console.error("Error in shuffle operation:", error);
  trademarksShuffled = trademarkFiles; // Use unshuffled array as fallback
}

// Make sure we have at least some logos to display
if (trademarksShuffled.length === 0) {
  // Add some fallback logos if none were found
  trademarksShuffled.push("fallback1", "fallback2", "fallback3");
  console.log("Using fallback trademarks");
}

// Debug info
const debugInfo = {
  totalTrademarks: trademarkFiles.length,
  firstFewTrademarks: trademarksShuffled.slice(0, 5),
  componentsDir,
};
---

<div class="trademark-ribbon">
  <div class="ribbon">
    {
      trademarksShuffled.map((trademark) => (
        <div class="trademark" key={trademark}>
          <TrademarkFragment trademark={trademark} />
        </div>
      ))
    }
  </div>
  <!--   <div class="debug-info">
    Found {debugInfo.totalTrademarks} trademarks in {
      debugInfo.componentsDir
    }.<br />
    First few: {debugInfo.firstFewTrademarks.join(", ")}
  </div> -->
</div>

<style>
  .trademark-ribbon {
    width: 100%;
    height: 6vh;
    padding: 1rem 0;
  }

  .ribbon {
    display: flex;
    animation: scroll 320s linear infinite;
    width: max-content;
  }

  @keyframes scroll {
    0% {
      transform: translateX(0);
    }
    100% {
      transform: translateX(-50%);
    }
  }

  .trademark {
    flex: 0 0 auto;
    margin: 0 1rem;
    height: 100%;
    max-height: 2rem;
    align-items: center;
    object-fit: contain;
  }

  .debug-info {
    font-size: 0.8rem;
    color: #666;
    margin-top: 1rem;
    padding: 0.5rem;
    background-color: #f5f5f5;
    border-radius: 4px;
  }

  /* Test logos section for debugging */
  .test-logos {
    display: flex;
    flex-wrap: wrap;
    gap: 1rem;
    margin-bottom: 1rem;
    padding: 1rem;
    background-color: #f0f0f0;
    border-radius: 4px;
  }

  .test-logo {
    padding: 0.5rem;
    border: 1px solid #ddd;
    border-radius: 4px;
    background-color: white;
  }

  .logo-name {
    font-weight: bold;
    margin-bottom: 0.25rem;
  }

  .file-status {
    font-size: 0.8rem;
  }

  .file-exists {
    color: green;
  }

  .file-missing {
    color: red;
  }
   
  .fallback {
    font-size: 10px;
    color: #999;
    text-align: center;
    word-break: break-all;
    padding: 4px;
  }
</style>
