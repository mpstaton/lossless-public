---
import "@styles/global.css";
import Layout from "@layouts/Layout.astro";
import { getCollection } from "astro:content";
import CardGrid from "@basics/CardGrid.astro";
import TagColumn from "@tool-components/TagColumn.astro";
import ToolCard from "@components/tool-components/ToolCard.astro";

const { title, description } = Astro.props;

const toolEntries = await getCollection("tooling");
console.log("Tool entries:", toolEntries.length);

interface Tool {
  site_name?: string;
  title?: string;
  url: string;
  image?: string;
  favicon?: string;
  description?: string;
  description_site_cp?: string;
  zinger?: string;
  tags?: string[];
  og_screenshot_url?: string;
  og_last_fetch?: string;
}

const tag = "AI-Toolkit"
console.log("Current tag:", tag);

const aiToolKit = toolEntries
  .filter((entry) => {
    const frontmatter = entry.data;
    return frontmatter.tags && frontmatter.tags.includes(tag);
    console.log("Filtered toolkit:", aiToolKit.length);
  })
  .map((entry) => ({
    site_name: entry.data.site_name,
    title: entry.data.title,
    url: entry.data.url,
    image: entry.data.image,
    favicon: entry.data.favicon,
    description: entry.data.description || entry.data.zinger || "",
    description_site_cp: entry.data.description_site_cp,
    tags: entry.data.tags || [],
    filename: entry.id,
    og_screenshot_url: entry.data.og_screenshot_url,
  }));
  
  const allTags = Array.from(
  new Set(
    aiToolKit.flatMap(tool => tool.tags)
  )
).sort()
  
  


/* // Get all entries from the tools collection
const toolEntries = await getCollection("tooling");
// Tools are now directly in the entry data
const tools = toolEntries.map((entry) => entry.data);

// Optional props
interface Props {
  title?: string;
  description?: string;
  columns?: number;
  gap?: string;
  minCardWidth?: string;
}

const {
  title = "Toolkit",
  description = "A collection of useful tools and resources",
  columns = 3,
  gap = "2rem",
  minCardWidth = "300px",
} = Astro.props; */
---

<Layout title={title} description={description}>
  <div class="toolkit-container">
    <header class="toolkit-header">
      <h1>{title}</h1>
      {description && <p class="toolkit-description">{description}</p>}
    </header>

    <main class="toolkit-content">
      <TagColumn allRenderedTags={allTags} tools={aiToolKit} />
      <CardGrid>
        {aiToolKit.map((tool: Tool) => <ToolCard tool={tool} />)}
      </CardGrid>

      <!--
    {
      tools && tools.length > 0 ? (
        <CardGrid columns={columns} gap={gap} minCardWidth={minCardWidth}>
          {tools.map((tool) => (
            <ToolCard
              url={tool.url}
              site_name={tool.site_name}
              title={tool.title}
              image={tool.image}
              favicon={tool.favicon}
              description={tool.description}
              tags={tool.tags}
            />
          ))}
        </CardGrid>
      ) : (
        <div class="no-tools">
          <p>No tools found. Check back later!</p>
        </div>
      )
    } -->

      <slot />
    </main>
  </div>
</Layout>

<style>
  header {
    display: flex;
    flex-direction: column;
    justify-content: space-between;
    align-items: center;
  }

  .toolkit-content {
    display: flex;
    flex-direction: row;
    gap: 2rem;
    padding: 2em 0;
  }

  .toolkit-container {
    width: 92%;
    margin: 0 auto;
    padding: 2rem;
  }

  .toolkit-header {
    margin-bottom: 3rem;
    text-align: center;
  }

  .toolkit-header h1 {
    font-size: var(--fs-800);
    color: var(--clr-heading);
    margin-bottom: 1rem;
  }

  .toolkit-description {
    font-size: var(--fs-400);
    color: var(--clr-body);
    max-width: 800px;
    margin: 0 auto;
    line-height: 1.6;
  }

  .toolkit-content {
    width: 100%;
  }

  .no-tools {
    text-align: center;
    padding: 3rem;
    background-color: var(--clr-lossless-primary-dark);
    border-radius: 1rem;
    color: var(--clr-body);
  }

  @media (max-width: 768px) {
    .toolkit-container {
      padding: 1rem;
    }

    .toolkit-header {
      margin-bottom: 2rem;
    }
  }
</style>
